*------------------------------------------------------------*
User:                IAA-Student
Date:                October 26, 2018
Time:                11:22:19
Site:                70112978
Platform:            X64_10PRO
Maintenance Release: 9.04.01M5P091317
EM Version:          14.3
* 
*------------------------------------------------------------*
* Training Log
Date:                October 26, 2018
Time:                11:22:01
*------------------------------------------------------------*
15207  proc freq data=EMWS1.Tree_VariableSet noprint;
15208  table ROLE*LEVEL/out=WORK.TreeMETA;
15209  run;
 
NOTE: There were 17 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
 
 
15210  proc print data=WORK.TreeMETA label noobs;
15211  var ROLE LEVEL COUNT;
15212  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15213  title9 ' ';
15214  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15215  run;
 
NOTE: There were 3 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15216  title10;
 
15217  %let EMNORLEN = %DMNORLEN;
EMWS1.Ids_DATA EMWS1.Ids_DATA
EMWS1.Ids_DATA EMWS1.Ids_DATA EMWS1 Ids_DATA
EMWS1.Ids_DATA EMWS1.Ids_DATA
EMWS1.Ids_DATA EMWS1.Ids_DATA EMWS1 Ids_DATA
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15246  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15247  length ORDER $20;
15248  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15249     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15250  set EMWS1.IDS_Y_DM( where=(_TYPE_="TARGET"));
15251  NumLevels=2;
15252  select(upcase(ORDER));
15253  when('DESC') ORDER = 'Descending';
15254  when('ASC') ORDER = 'Ascending';
15255  when('FMTDESC') ORDER = 'Formatted Descending';
15256  when('FMTASC') ORDER = 'Formatted Ascending';
15257  otherwise ORDER = 'Descending';
15258  end;
15259  output;
15260  run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_Y_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
15261  title9 ' ';
15262  proc print data=WORK.Tree_EVENT noobs label;
15263  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15264  title9 ' ';
15265  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15266  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15267  title10;
 
"No decisions defined for target "y"."
15268  proc print data = EMWS1.Ids_y_DM noobs label;
15269  var _type_ variable label;
15270  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15271  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15272  title9 ' ';
15273  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15274  run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS_Y_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15275  title10;
 
15276  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15818  *------------------------------------------------------------*;
15819  * Tree: Generation of macros and macro variables;
15820  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15821  *------------------------------------------------------------*;
 
15822  %let EMEXCEPTIONSTRING=;
15823  *------------------------------------------------------------*;
15824  * TRAIN: Tree;
15825  *------------------------------------------------------------*;
15826  %let EM_ACTION = TRAIN;
15827  %let syscc = 0;
15828  %macro main;
15829
15830    %if %upcase(&EM_ACTION) = CREATE %then %do;
15831      filename temp catalog 'sashelp.emmodl.tree_create.source';
15832      %include temp;
15833      filename temp;
15834
15835      %em_tree_create;
15836    %end;
15837
15838     %else
15839     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15840
15841         filename temp catalog 'sashelp.emmodl.tree_train.source';
15842         %include temp;
15843         filename temp;
15844         %em_tree_train;
15845     %end;
15846
15847    %else
15848    %if %upcase(&EM_ACTION) = SCORE %then %do;
15849      filename temp catalog 'sashelp.emmodl.tree_score.source';
15850      %include temp;
15851      filename temp;
15852
15853      %em_tree_score;
15854
15855    %end;
15856
15857    %else
15858    %if %upcase(&EM_ACTION) = REPORT %then %do;
15859
15860         filename temp catalog 'sashelp.emmodl.tree_report.source';
15861         %include temp;
15862         filename temp;
15863
15864         %em_tree_report;
15865     %end;
15866
15867    %else
15868    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15869
15870         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15871         %include temp;
15872         filename temp;
15873         %EM_TREE_OPENTREEVIEWER;
15874
15875     %end;
15876
15877    %else
15878    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15879
15880         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15881         %include temp;
15882         filename temp;
15883         %EM_TREE_CLOSETREEVIEWER;
15884
15885     %end;
15886
15887
15888     %doendm:
15889  %mend main;
15890
15891  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15893 +%macro em_tree_train;
15895 +   %if &EM_IMPORT_DATA eq %then %do;
15896 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15897 +       %put &em_codebar;
15898 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15899 +       %put &errormsg;
15900 +       %put &em_codebar;
15901 +       %goto doendm;
15902 +   %end;
15903 +   %else
15904 +       %let EMEXCEPTIONSTRING =;
15906 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15907 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15908 +        %put &em_codebar;
15909 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15910 +        %put &errormsg;
15911 +        %put &em_codebar;
15912 +        %goto doendm;
15913 +   %end;
15915 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15916 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15917 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15918 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15919 +        %put &em_codebar;
15920 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15921 +        %put &errormsg;
15922 +        %put &em_codebar;
15923 +        %goto doendm;
15924 +   %end;
15926 +   /* Initialize property macro variables */
15927 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15928 +   %include temp;
15929 +   filename temp;
15931 +   %EM_SetProperties;
15933 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15934 +   %EM_GETNAME(key=EMTREE, type=DATA);
15935 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15936 +     /* if import eq Y and no importtable defined, throw an exception */
15937 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15938 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15939 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15940 +         %put &em_codebar;
15941 +         %put &errmsg;
15942 +         %put &em_codebar;
15943 +         %goto doendm;
15944 +      %end;
15945 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15946 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15947 +         %put &em_codebar;
15948 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15949 +         %put &errormsg;
15950 +         %put &em_codebar;
15951 +         %goto doendm;
15952 +      %end;
15953 +      %else %do;
15954 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15955 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15956 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15957 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15958 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15959 +         %let dsid = %sysfunc(close(&dsid));
15960 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15961 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15962 +            %put &em_codebar;
15963 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15964 +            %put &errormsg;
15965 +            %put &em_codebar;
15966 +            %goto doendm;
15967 +         %end;
15968 +      %end;
15969 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15970 +         proc delete data=&EM_USER_EMTREE;
15971 +         run;
15972 +      %end;
15973 +   %end;
15974 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15975 +      proc delete data=&EM_USER_EMTREE;
15976 +      run;
15977 +   %end;
15979 +   /* load tree macros */
15980 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15981 +   %include temp;
15982 +   filename temp;
15984 +   /* data sets */
15985 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15986 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15987 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15989 +   /* files */
15990 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15992 +   /* check actual num of target levels */
15993 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15994 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15995 +                              nLevel=_nTargetLevel );
15996 +      %if &_nTargetLevel  > 2 %then %do;
15997 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15998 +        %put &em_codebar;
15999 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16000 +        %put &errormsg;
16001 +        %put &em_codebar;
16002 +        %goto doendm;
16003 +      %end;
16004 +   %end;
16006 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16007 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16008 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16009 +        %let costflag=0;
16010 +        data _null_;
16011 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16012 +          if eof then call symput("costflag", _N_);
16013 +        run;
16014 +        %if &costflag gt 0 %then %do;
16015 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16016 +          %put &em_codebar;
16017 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16018 +          %put &errormsg;
16019 +          %put &em_codebar;
16020 +          %goto doendm;
16021 +       %end;
16022 +     %end;
16023 +   %end;
16025 +   /* determine if multiple targets will be processed */
16026 +   %let em_tree_multipleTargets=N;
16027 +   %let em_tree_numTarget = 1;
16028 +   %let em_tree_targetVars=;
16030 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16031 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16032 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16033 +         %let em_tree_multipleTargets=N;
16034 +      %end;
16035 +      %else %do;
16036 +         /* create macro array of targets  */
16037 +         data _null_;
16038 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16039 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16040 +           if eof then
16041 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16042 +        run;
16044 +        %if &em_tree_numTarget gt 1 %then %do;
16045 +           %let em_tree_multipleTargets=Y;
16046 +        %end;
16047 +      %end;
16048 +   %end;
16050 +   /* create view of only necessary variable for performance reasons */
16051 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16052 +   data &tempData / view=&tempData;
16053 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16054 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16055 +       %EM_TARGET
16056 +     %end;
16057 +     %else %do;
16058 +       %if &em_tree_numTarget ne 0 %then %do;
16059 +         %do i=1 %to &em_tree_numTarget;
16060 +            &&em_tree_targetVars&i
16061 +         %end;
16062 +       %end;
16063 +     %end;
16064 +     );
16065 +   run;
16067 +   /* run Tree procedure */
16068 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16070 +   /* Check return code and throw exception if error is detected */
16071 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16072 +   %if &syserr %then %do;
16073 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16074 +     %goto doendm;
16075 +   %end;
16077 +   /* add decision score code if multiple targets are processed */
16078 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16079 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16080 +   %end;
16082 +   /* create outfit dataset if multiple score statements have been executed */
16083 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16085 +   /* create English Rules */
16086 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16087 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16088 +       %em_tree_makeEnglishRules;
16090 +       /* English Rules */
16091 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16093 +     %end;
16094 +   filename x;
16096 +   %doendm:
16097 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16098 +%macro EM_SetProperties;
16100 +   /* train properties */
16101 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16102 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16103 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16104 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16105 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16106 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16107 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16108 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16109 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16110 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16111 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16112 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16113 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16114 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16115 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16116 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16117 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16118 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16119 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16120 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16121 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16122 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16123 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16124 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16143 +   /* properties for interactive sample */
16144 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16149 +   /* report properties */
16150 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16164 +   /* score properties */
16165 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16168 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16170 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16171 +  %global &nLevel;
16172 +  proc dmdb batch data=&indata
16173 +    classout=_tmp_dmdbout;
16174 +    class &target;
16175 +  run;
16176 +  data _tmp_dmdbout;
16177 +    set _tmp_dmdbout;
16178 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16179 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16180 +  run;
16181 +  data _null_;
16182 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16183 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16184 +    %let dsid = %sysfunc(close(&dsid));
16185 +     call symput("&nLevel", put(&_obs, Best12.));
16186 +  run;
16188 +  proc datasets lib=work nolist;
16189 +     delete _tmp_dmdbout;
16190 +  run;
16191 +  quit;
16192 +%Mend EM_CheckBinaryTargetLevel;
16195 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16197 +  /* determine the number of obs in training data */
16198 +  proc sql;
16199 +    reset noprint;
16200 +    select count(*) into :em_nobs from &indata;
16201 +  quit;
16203 +  /* determine the number of input variables */
16204 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16205 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16207 +  /* retrieve targetEvent from decmeta */
16208 +  %let targetEvent=;
16209 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16210 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16211 +      data _null_;
16212 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16213 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16214 +      run;
16215 +    %end;
16216 +  %end;
16218 +  /* create targetTable if multipleTar eq Y */
16219 +  data temptarget;
16220 +    set &EM_DATA_VARIABLESET;
16221 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16222 +  run;
16224 + /* data sets */
16225 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16226 + %EM_GETNAME(key=EMTREE,        type=DATA);
16227 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16228 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16229 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16230 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16231 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16232 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16233 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16234 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16236 + /* files */
16237 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16238 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16240 + /* turn on pmml if requested */
16241 + %let nnpmml=0;
16242 + %if %symexist(EM_PMML) %then %do;
16243 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16244 +       %let nnpmml=1;
16246 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16247 +   %end;
16248 +%end;
16250 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16252 +%if &nnpmml or &numClassTarget %then %do;
16254 +    /* create dmdb needed for pmml generation */
16255 +    %let tree_maxlevel = 512;
16256 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16257 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16258 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16259 +      %end;
16260 +    %end;
16261 +    %if &tree_maxlevel gt 0 %then %do;
16262 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16263 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16264 +    %end;
16266 +    %let targetOrderString =;
16267 +    %let targetString = ;
16268 +    data _null_;
16269 +       length orderString nameString $10000;
16270 +       retain orderString nameString;
16271 +       set &em_data_variableset end=eof;
16272 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16273 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16274 +       %end;
16275 +       %else %do;
16276 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16277 +       %end;          select(order);
16278 +         when('')        order ='DESC';
16279 +         when('FMTASC')  order='ASCFMT';
16280 +         when('FMTDESC') order='DESFMT';
16281 +         otherwise;
16282 +       end;
16283 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16284 +       nameString = trim(nameString)!!' '!!trim(NAME);
16286 +       if eof then do;
16287 +          call symput('targetOrderString', trim(orderString));
16288 +          call symput('targetString', trim(nameString));
16289 +       end;
16290 +    run;
16292 +    %let arborkluge= "work._treeDMDB";
16294 +    proc dmdb batch data=&indata
16295 +    %if &nnpmml %then %do;
16296 +        PMML
16297 +    %end;
16298 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16300 +      %if &nnpmml %then %do;
16301 +           %if "%EM_ID" ne "" %then %do;
16302 +             id %EM_ID;
16303 +           %end;
16304 +           %if &EM_NUM_CLASS gt 0 %then %do;
16305 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16306 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16307 +                  &targetOrderString;
16308 +           %end;
16309 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16310 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16311 +           %end;
16312 +           target &targetString %EM_INTERVAL_TARGET;
16313 +           %if "%EM_FREQ" ne "" %then %do;
16314 +             freq %EM_FREQ;
16315 +           %end;
16316 +      %end;
16317 +      %else %do;
16318 +         class  &targetOrderString;
16319 +         target &targetString %EM_INTERVAL_TARGET;
16320 +      %end;
16321 +    run;
16322 +    quit;
16324 +    proc datasets lib=work nolist;
16325 +       delete classout varout;
16326 +    run;
16327 +    quit;
16329 + %end;
16332 + /* run Arbor procedure */
16333 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16334 +  proc arbor data=&INDATA
16336 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16337 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16338 +  %end;
16340 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16341 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16342 +  %end;
16344 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16345 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16346 +  %end;
16348 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16349 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16350 +  %end;
16352 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16353 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16354 +  %end;
16356 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16357 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16358 +  %end;
16359 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16360 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16361 +  %end;
16362 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16363 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16364 +  %end;
16366 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16367 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16368 +      alpha = &EM_PROPERTY_SIGLEVEL
16369 +    %end;
16370 +  %end;
16372 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16373 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16374 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16375 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16376 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16378 +        padjust =
16379 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16380 +          &chaid
16381 +        %end;
16382 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16383 +          DEPTH
16384 +        %end;
16385 +      %end;
16386 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16387 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16388 +         pvars = &num_inputs
16389 +      %end;
16390 +    %end;
16391 +  %end;
16392 +  %else %do;
16393 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16394 +         padjust = NONE
16395 +      %end;
16396 +  %end;
16398 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16399 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16400 +    Maxrules = &num_nrules
16401 +  %end;
16403 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16404 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16405 +    Maxsurrs = &num_nsurrs
16406 +  %end;
16408 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16409 +     Missing=&EM_PROPERTY_MISSINGVALUE
16410 +  %end;
16412 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16413 +     USEVARONCE
16414 +  %end;
16416 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16417 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16418 +  %end;
16421 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16422 +    event = "&targetEvent"
16423 +  %end;
16425 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16426 +     DECSEARCH
16427 +  %end;
16429 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16430 +     PRIORSSEARCH
16431 +  %end;
16433 +  %if &arbor_1 ne %then %do;
16434 +    &arbor_1
16435 +  %end;
16437 +  %if &em_arbor ne %then %do;
16438 +     &em_arbor
16439 +  %end;
16440 +  ;
16441 + %end;
16442 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16443 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16444 +       Performance &EM_PROPERTY_PERFORMANCE
16445 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16446 +         nodesize=&EM_PROPERTY_NODESAMPLE
16447 +       %end;
16448 +       ;
16449 +       interact;
16450 + %end;
16451 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16452 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16453 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16454 +    %put &em_codebar;
16455 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16456 +    %put &errormsg;
16457 +    %put &em_codebar;
16458 +    %goto doendm;
16459 +   %end;
16460 +   %else %do;
16461 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16462 +       Performance &EM_PROPERTY_PERFORMANCE
16463 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16464 +         nodesize=&EM_PROPERTY_NODESAMPLE
16465 +       %end;
16466 +       ;
16467 +       interact;
16468 +   %end;
16469 + %end;
16471 + %else %do;
16472 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16473 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16474 +    %put &em_codebar;
16475 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16476 +    %put &errormsg;
16477 +    %put &em_codebar;
16478 +    %goto doendm;
16479 +   %end;
16480 +   %else %do;
16481 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16482 +       Performance &EM_PROPERTY_PERFORMANCE
16483 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16484 +         nodesize=&EM_PROPERTY_NODESAMPLE
16485 +       %end;
16486 +       ;
16487 +        interact;
16488 +   %end;
16489 + %end;
16491 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16492 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16493 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16494 +    %end;
16496 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16497 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16498 +    %end;
16500 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16501 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16502 +    %end;
16504 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16505 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16506 +    %end;
16508 +    %if "%EM_FREQ" ne "" %then %do;
16509 +       freq %EM_FREQ;
16510 +    %end;
16512 +    %if "&multipleTar" eq "Y" %then %do;
16513 +       /* cycle through all target vars in variableset */
16514 +       %let tdsid = %sysfunc(open(temptarget));
16515 +       %if &tdsid %then %do;
16516 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16517 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16518 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16519 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16520 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16521 +             target &var / level = &lvl
16522 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16523 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16524 +             %end;
16525 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16526 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16527 +             %end;
16528 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16529 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16530 +             %end;
16531 +          %end;
16532 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16533 +       %end;
16534 +       useTarget variable = %EM_TARGET;
16535 +    %end;
16536 +    %else %do;
16537 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16538 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16539 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16540 +      %end;
16541 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16542 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16543 +      %end;
16544 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16545 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16546 +      %end;
16547 +    %end;
16549 +    %if "&multipleTar" eq "N" %then %do;
16550 +      &EM_DEC_STATEMENT;
16551 +    %end;
16553 +    Performance &EM_PROPERTY_PERFORMANCE
16554 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16555 +      nodesize=&EM_PROPERTY_NODESAMPLE
16556 +    %end;
16557 +    ;
16559 +    %if "&intFlag" eq "Y" %then %do;
16560 +       INTERACT Largest;
16561 +       Train maxnewdepth=0;
16562 +    %end;
16564 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16565 +         Assess
16566 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16567 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16568 +              %put &em_codebar;
16569 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16570 +              %put &errormsg;
16571 +              %put &em_codebar;
16572 +            %end;
16573 +            %else %do;
16574 +               Validata=&EM_IMPORT_VALIDATE
16575 +            %end;
16576 +         %end;
16577 +         %else %do;
16578 +           NoValidata
16579 +         %end;
16580 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16581 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16582 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16583 +               %if &dsid %then %do;
16584 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16585 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16586 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16587 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16588 +                   %else %do;
16589 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16590 +                      %else %let measure= MISC;
16591 +                   %end;
16592 +                 %end;
16593 +               %end;
16594 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16595 +            %end;
16596 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16597 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16598 +                 %let measure=ASE;
16599 +              %end;
16600 +              %else %do;
16601 +                 %let measure=MISC;
16602 +              %end;
16603 +            %end;
16604 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16605 +              %let measure=ASE;
16606 +            %end;
16607 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16608 +               %let measure = LIFT;
16609 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16610 +               %if &dsid %then %do;
16611 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16612 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16613 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16614 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16615 +                 %end;
16616 +               %end;
16617 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16618 +            %end;
16619 +            measure=&measure
16620 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16621 +               event = "&targetEvent"
16622 +            %end;
16623 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16624 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16625 +            %end;
16626 +         %end;
16627 +         %if "&multipleTar" eq "N" %then %do;
16628 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16629 +               CV
16630 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16631 +                 CVNITer = &EM_PROPERTY_CVNITER
16632 +               %end;
16633 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16634 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16635 +               %end;
16636 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16637 +                 CVSeed = &EM_PROPERTY_CVSEED
16638 +               %end;
16639 +            %end;
16640 +         %end;
16641 +       %end;
16642 +      ;
16644 +      %if "&intFlag" ne "Y" %then %do;
16645 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16646 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16647 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16648 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16650 +          SUBTREE &subtree
16651 +          %if "&subtree" eq "NLEAVES" %then %do;
16652 +            =&EM_PROPERTY_NSUBTREE
16653 +          %end;
16654 +          ;
16655 +        %end;
16657 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16658 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16659 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16660 +          %end;
16661 +       %end;
16662 +      %end;
16663 + %end;
16666 + MakeMacro nleaves = nleaves;
16667 + save
16668 + %if "&EM_USER_EMTREE" ne "" %then %do;
16669 +   MODEL=&EM_USER_EMTREE
16670 + %end;
16671 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16672 +   SEQUENCE=&EM_USER_OUTSEQ
16673 + %end;
16674 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16675 +   IMPORTANCE=&EM_USER_OUTIMPORT
16676 + %end;
16677 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16678 +   NODESTAT=&EM_USER_OUTNODES
16679 + %end;
16680 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16681 +   SUMMARY=&EM_USER_OUTSUMMARY
16682 + %end;
16683 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16684 +   STATSBYNODE=&EM_USER_OUTSTATS
16685 + %end;
16686 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16687 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16688 + %end;
16689 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16690 +   Pathlistnonmissing=&EM_USER_OUTPATH
16691 + %end;
16692 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16693 +   RULES = &EM_USER_OUTRULES
16694 + %end;
16695 + ;
16697 + %if "&intFlag" ne "Y" %then %do;
16699 +   %let lookupString = ;
16700 +   %if ^%symexist(EM_OPTION) %then
16701 +      %let EM_OPTION=;
16703 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16704 +      %let lookupString = LOOKUP=SELECT;
16705 +   %end;
16707 +   %let codetext=;
16708 +   %let norescodetxt=;
16710 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16711 +     %let codetext=&codetext DUMMY;
16712 +     %let norescodetxt=&norescodetxt DUMMY;
16713 +   %end;
16714 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16715 +     %let codetext=&codetext NOLEAFID;
16716 +     %let norescodetxt=&norescodetxt NOLEAFID;
16717 +   %end;
16718 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16719 +     %let norescodetxt=&norescodetxt NOPRED;
16720 +   %end;
16722 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16723 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16725 +   %if &nnpmml %then %do;
16726 +     code pmml;
16727 +   %end;
16729 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16730 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16731 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16732 +   %end;
16733 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16734 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16735 +   %end;
16736 + %end;
16738 + run;
16739 + quit;
16741 + /*%em_checkerror(); */
16742 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16743 +   /* Delete DMDB catalog */
16744 +   proc datasets lib=work nolist;
16745 +       delete _treeDMDB / mt=cat;
16746 +  run;
16747 +  %end;
16749 + %if &nnpmml %then %do;
16750 +    ods pmml close;
16751 + %end;
16753 +  %doendm:
16755 +%mend em_tree_runTreeProcedure;
16757 +%macro em_tree_createFitStats( multipleTar= );
16760 +  /* create targetTable is multipleTar eq Y */
16761 +  data temptarget;
16762 +    set &EM_DATA_VARIABLESET;
16763 +    where ROLE="TARGET";
16764 +  run;
16766 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16767 +   data &EM_USER_EMOUTFIT;
16768 +     length target $32;
16769 +     merge work.fit_train
16770 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16771 +       work.fit_valid
16772 +     %end;
16773 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16774 +       work.fit_test
16775 +     %end;
16776 +     ;
16777 +     %if "&multipleTar" eq "N" %then %do;
16778 +       target="%EM_TARGET";
16779 +     %end;
16780 +     %else %do;
16781 +       target = _TARGET_;
16782 +     %end;
16783 +     drop _NW_ _SUMW_
16784 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16785 +        _VSUMW_
16786 +     %end;
16787 +     ;
16788 +   run;
16790 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16791 +     proc datasets library=work nolist;
16792 +       delete fit_valid;
16793 +     run;
16794 +   %end;
16795 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16796 +     proc datasets library=work nolist;
16797 +       delete fit_test;
16798 +     run;
16799 +   %end;
16801 +%mend em_tree_createFitStats;
16804 +%macro em_tree_makeEnglishRules;
16806 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16807 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16809 +  /* verify that necessary tables exist and if not, skip processing */
16810 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16811 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16812 +    %goto doendm;
16813 +  %end;
16814 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16815 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16816 +    %goto doendm;
16817 +  %end;
16819 +  /* determine length of variable in outpath dataset */
16820 +  %let vlength= ;
16821 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16822 +  %if &dsid ne %then %do;
16823 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16824 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16825 +  %end;
16826 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16828 +  data tempoutpath;
16829 +    length varname $&vlength;
16830 +    retain varname;
16831 +    set &EM_USER_OUTPATH;
16833 +    if ^missing(variable) then varname=variable;
16834 +    else if ^missing(var_name) then varname=var_name;
16835 +    output;
16836 +  run;
16838 +  /* create an array of generated predicted variable names */
16839 +  %let tree_pred_vars = ;
16840 +  %let tree_pred_label = ;
16841 +  %let numpred= 0;
16842 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16844 +    data _null_;
16845 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16846 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16847 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16848 +     if eof then
16849 +       call symput('numpred', strip(put(_N_, BEST.)));
16850 +    run;
16851 +  %end;
16853 +  /* determine if NPRIORS exists in outnodes  */
16854 +  %local nprior_flag;
16855 +  data _null_;
16856 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16857 +    if eof then do;
16858 +      call symput('nprior_flag', strip(put(npriors, best.)));
16859 +    end;
16860 +  run;
16862 +  proc sort data=tempoutpath; by node; run;
16863 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16865 +  data tempoutpath;
16866 +    merge tempoutpath(in=_a) outnodes(keep= node
16867 +    %if "&nprior_flag" ne "." %then %do;
16868 +      NPRIORS
16869 +    %end;
16870 +    %else %do;
16871 +      N
16872 +    %end;
16873 +    %if &numpred gt 0 %then %do;
16874 +      %do i=1 %to &numpred;
16875 +        &&tree_pred_vars&i
16876 +      %end;
16877 +    %end;
16878 +    );
16879 +    by node;
16880 +    if _a;
16881 +  run;
16883 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16885 +  data _null_;
16886 +    file x;
16887 +    set tempoutpath;
16888 +    by node descending varname;
16889 +    retain origvar oldnode string;
16890 +    length origvar $32 oldnode 8 string $200;
16892 +    if _N_ = 1 then do;
16893 +      origvar = varname;
16894 +      oldnode = node;
16895 +    end;
16897 +    if first.node then do;
16898 +       put "&EM_CODEBAR";
16899 +       put " Node = " node;
16900 +       put "&EM_CODEBAR";
16901 +    end;
16903 +      if first.varname then do;
16904 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16905 +            if MISSING(CHARACTER_VALUE) then do;
16906 +             if NUMERIC_VALUE ne .  then do;
16907 +              if ^first.node then do;
16908 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16909 +              end;
16910 +              else do;
16911 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16912 +              end;
16913 +             end;
16914 +            end;
16915 +            else do;
16916 +              if ^first.node then do;
16917 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16918 +              end;
16919 +              else do;
16920 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16921 +              end;
16922 +             end;
16923 +         end;
16924 +         else if RELATION in ("=") then do;
16925 +            if ^first.node then do;
16926 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16927 +            end;
16928 +            else do;
16929 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16930 +            end;
16931 +         end;
16932 +         else if RELATION in ("ISMISSING") then do;
16933 +            if ^first.node then do;
16934 +              string = " AND "|| strip(varname) || " equals Missing";
16935 +            end;
16936 +            else do;
16937 +              string = "if "|| strip(varname) ||" equals Missing";
16938 +            end;
16939 +         end;
16940 +         else if RELATION in ("ISNOTMISSING") then do;
16941 +            if ^first.node then do;
16942 +              string = " AND "|| strip(varname) || " equals All Values";
16943 +            end;
16944 +            else do;
16945 +              string = "if "|| strip(varname) ||" equals All Values";
16946 +            end;
16947 +         end;
16948 +         if ^missing(varname) then origvar = varname;
16949 +         oldnode=node;
16951 +      end;
16952 +      else do;
16953 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16954 +          if MISSING(CHARACTER_VALUE) then do;
16955 +           if  NUMERIC_VALUE ne .  then do;
16956 +            if ^MISSING(string) then
16957 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16958 +            else
16959 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16960 +           end;
16961 +          end;
16962 +          else do;
16963 +            if ^MISSING(string) then
16964 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16965 +            else
16966 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16967 +          end;
16969 +         end;
16970 +         else if RELATION in ("=") then do;
16971 +           string = strip(string)||", "||strip(character_value);
16972 +         end;
16973 +         else if RELATION in ("ISMISSING") then do;
16975 +         end;
16976 +         if ^missing(varname) then origvar = varname;
16977 +         oldnode=node;
16978 +      end;
16979 +      if last.varname then do;
16980 +         if RELATION in ("ISMISSING") then do;
16981 +           if ^first.varname then do;
16982 +             string = strip(string) || " or MISSING";
16983 +           end;
16984 +         end;
16985 +         put string;
16986 +         if ^missing(varname) then origvar = varname;
16987 +         oldnode=node;
16988 +      end;
16990 +      if last.node then do;
16991 +         put "then ";
16992 +         put " Tree Node Identifier   = " node;
16994 +         %if "&nprior_flag" ne "." %then %do;
16995 +           put " Number of Observations = " NPRIORS;
16996 +         %end;
16997 +         %else %do;
16998 +           put " Number of Observations = " N;
16999 +         %end;
17001 +         %if &numpred gt 0 %then %do;
17002 +           %do i=1 %to &numpred;
17003 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17004 +           %end;
17005 +         %end;
17007 +         put " ";
17008 +         if ^missing(varname) then origvar = varname;
17009 +         oldnode=node;
17010 +      end;
17012 +  run;
17014 +  proc datasets lib=work nolist;
17015 +    delete tempoutpath outnodes;
17016 +  run;
17018 +  %doendm:
17019 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IDS_DATA.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.10 seconds
 
 
NOTE: There were 45211 observations read from the data set DATA.FFTSALES.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
NOTE: There were 45211 observations read from the data set EMWS1.IDS_DATA.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.18 seconds
      cpu time            0.14 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_Y_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 45211   Memory used = 511K.
NOTE: There were 45211 observations read from the data set DATA.FFTSALES.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
 
NOTE: There were 45211 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 45211 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.20 seconds
      cpu time            0.17 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: 1543618 kilobytes of physical memory.
NOTE: Will use 45211 out of 45211 training cases.
NOTE: Using memory pool with 339353600 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 15860072 bytes of work memory.
NOTE: The subtree sequence contains 59 subtrees. The largest has 117 nodes and 59 leaves.
NOTE: Using subtree with 43 nodes and 22 leaves.
NOTE: Using subtree with 43 nodes and 22 leaves.
NOTE: Created macro variable NLEAVES equal to 22.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 16 observations and 4 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 4998 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 43 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 223 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 1521 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 59 observations and 12 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 172 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 12 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 43 observations and 5 variables.
NOTE: External file Z:\github\fall_2_orange_hw\data_mining\hw2\hw_2_dave\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file Z:\github\fall_2_orange_hw\data_mining\hw2\hw_2_dave\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 45211 observations read from the data set DATA.FFTSALES.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.62 seconds
      cpu time            0.60 seconds
 
NOTE: There were 45211 observations read from the data set EMWS1.IDS_DATA.
 
 
NOTE: There were 45211 observations read from the data set DATA.FFTSALES.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           2.89 seconds
      cpu time            2.60 seconds
 
NOTE: There were 45211 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 45211 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           2.93 seconds
      cpu time            2.64 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 223 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 223 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_Y_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 223 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 223 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 43 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 223 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 43 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 223 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 223 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 223 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=Z:\github\fall_2_orange_hw\data_mining\hw2\hw_2_dave\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=26Oct2018:11:22:10,
      Create Time=26Oct2018:11:22:10
 
NOTE: 279 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 80.
NOTE: There were 223 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
17021
17022  *------------------------------------------------------------*;
17023  * End TRAIN: Tree;
17024  *------------------------------------------------------------*;
 
17025  *------------------------------------------------------------*;
17026  * Close any missing semi colons;
17027  *------------------------------------------------------------*;
17028  ;
17029  ;
17030  ;
17031  ;
17032  quit;
17033  *------------------------------------------------------------*;
17034  * Close any unbalanced quotes;
17035  *------------------------------------------------------------*;
17036  /*; *"; *'; */
17037  ;
17038  run;
17039  quit;
17040  /* Reset EM Options */
17041  options formchar="|----|+|---+=|-/\<>*";
17042  options nocenter ls=256 ps=10000;
17043  goptions reset=all device=GIF NODISPLAY;
 
17044  proc sort data=WORK.EM_USER_REPORT;
17045  by ID VIEW;
17046  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                October 26, 2018
Time:                11:22:11
*------------------------------------------------------------*
17148  %let EMEXCEPTIONSTRING=;
17149  *------------------------------------------------------------*;
17150  * SCORE: Tree;
17151  *------------------------------------------------------------*;
17152  %let EM_ACTION = SCORE;
17153  %let syscc = 0;
17154  %macro main;
17155
17156    %if %upcase(&EM_ACTION) = CREATE %then %do;
17157      filename temp catalog 'sashelp.emmodl.tree_create.source';
17158      %include temp;
17159      filename temp;
17160
17161      %em_tree_create;
17162    %end;
17163
17164     %else
17165     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17166
17167         filename temp catalog 'sashelp.emmodl.tree_train.source';
17168         %include temp;
17169         filename temp;
17170         %em_tree_train;
17171     %end;
17172
17173    %else
17174    %if %upcase(&EM_ACTION) = SCORE %then %do;
17175      filename temp catalog 'sashelp.emmodl.tree_score.source';
17176      %include temp;
17177      filename temp;
17178
17179      %em_tree_score;
17180
17181    %end;
17182
17183    %else
17184    %if %upcase(&EM_ACTION) = REPORT %then %do;
17185
17186         filename temp catalog 'sashelp.emmodl.tree_report.source';
17187         %include temp;
17188         filename temp;
17189
17190         %em_tree_report;
17191     %end;
17192
17193    %else
17194    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17195
17196         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17197         %include temp;
17198         filename temp;
17199         %EM_TREE_OPENTREEVIEWER;
17200
17201     %end;
17202
17203    %else
17204    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17205
17206         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17207         %include temp;
17208         filename temp;
17209         %EM_TREE_CLOSETREEVIEWER;
17210
17211     %end;
17212
17213
17214     %doendm:
17215  %mend main;
17216
17217  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17219 +%macro em_tree_score;
17221 +   /* determine if multiple targets will be processed */
17222 +   %let em_tree_multipleTargets=N;
17223 +   %let em_tree_numTarget=1;
17224 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17225 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17226 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17227 +         %let em_tree_multipleTargets=N;
17228 +      %end;
17229 +      %else %do;
17230 +         /* create macro array of targets  */
17231 +         data _null_;
17232 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17233 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17234 +           if eof then
17235 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17236 +        run;
17238 +        %if &em_tree_numTarget gt 1 %then %do;
17239 +           %let em_tree_multipleTargets=Y;
17240 +        %end;
17241 +      %end;
17242 +   %end;
17244 +   /* build flow and publish scoring code */
17245 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17246 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17248 +   filename treeflow "&EM_USER_TREEFLOW";
17249 +   filename treepub "&EM_USER_TREEPUBLISH";
17251 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17252 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17254 +   %em_copyfile(infref=treeflow, outfref=flowref);
17255 +   %em_copyfile(infref=treepub, outfref=pubref);
17257 +   filename treeflow;
17258 +   filename treepub;
17260 +   /* if priors are used, add code to generate unadjusted residuals in export */
17261 +   %let useAdjPriors = N;
17262 +   data _null_;
17263 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17264 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17265 +   run;
17266 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17267 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17268 +      %include temp;
17269 +      filename temp;
17271 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17272 +      filename adjref "&EM_USER_adjResidualCode";
17273 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17275 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17277 +      filename adjref;
17278 +   %end;
17280 +   /* LEAF */
17281 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17282 +      data _null_;
17283 +        file flowref mod;
17284 +        put 'drop _LEAF_;';
17285 +      run;
17287 +      data _null_;
17288 +        file pubref mod;
17289 +        put 'drop _LEAF_;';
17290 +      run;
17292 +   %end;
17294 +   filename flowref;
17295 +   filename pubref;
17297 +   /* em_metachange code */
17298 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17299 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17300 +   %end;
17302 +   /* variable selection based on importance stat    */
17303 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17304 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17305 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17306 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17307 +     %let obs = %sysfunc(fetch(&dsid));
17308 +     %do %while(&obs=0);
17309 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17310 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17311 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17312 +       %let obs = %sysfunc(fetch(&dsid));
17313 +     %end;
17314 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17315 +   %end;
17317 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17318 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17319 +    %let tree_pred_vars = ;
17320 +    %let tree_pred_lvl =;
17321 +    %let numpred= 0;
17323 +    data _null_;
17324 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17325 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17326 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17327 +     if eof then
17328 +       call symput('numpred', strip(put(_N_, BEST.)));
17329 +    run;
17330 +   %end;
17332 +   %if &numpred ne 0 %then %do;
17333 +    %do i=1 %to &numpred;
17334 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17335 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17336 +    %end;
17337 +   %end;
17339 +   /* determine if multiple targets will be processed */
17340 +   %let em_tree_multipleTargets=N;
17341 +   %let em_tree_numTarget=1;
17342 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17343 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17344 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17345 +         %let em_tree_multipleTargets=N;
17346 +      %end;
17347 +      %else %do;
17348 +        data _null_;
17349 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17350 +          if eof then
17351 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17352 +        run;
17354 +        %if &em_tree_numTarget gt 1 %then %do;
17355 +           %let em_tree_multipleTargets=Y;
17356 +        %end;
17357 +     %end;
17358 +   %end;
17360 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17361 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17363 +      /* variable importance */
17364 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17365 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17367 +         %let validexist=0;
17368 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17369 +           %let validexist=1;
17370 +         %end;
17372 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17373 +         /* and the columns may not be generated                                                                                 */
17374 +         %let em_tree_cvexists=;
17375 +         %let em_tree_surrexists=.;
17376 +         data _null_;
17377 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17378 +            if eof then do ;
17379 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17380 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17381 +            end;
17382 +         run;
17384 +         data &EM_USER_OUTIMPORT;
17385 +            set &EM_USER_OUTIMPORT;
17387 +            /* format columns based on Precison value specified */
17388 +            format importance 15.&EM_PROPERTY_PRECISION
17389 +                 %if &validexist %then %do;
17390 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17391 +                 %end;
17392 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17393 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17394 +                 %end;
17395 +            ;
17396 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17397 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17398 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17399 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17400 +                 %if "&em_tree_surrexists" ne "" %then %do;
17401 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17402 +                 %end;
17403 +                 %if &validexist %then %do;
17404 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17405 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17406 +                 %end;
17407 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17408 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17409 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17410 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17411 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17412 +                 %end;
17413 +            ;
17414 +         run;
17416 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17417 +      %end;
17418 +   %end;
17420 +   %doendm:
17421 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=Z:\github\fall_2_orange_hw\data_mining\hw2\hw_2_dave\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=26Oct2018:11:22:11,
      Create Time=26Oct2018:11:22:11
 
NOTE: 353 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 76.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=Z:\github\fall_2_orange_hw\data_mining\hw2\hw_2_dave\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=26Oct2018:11:22:11,
      Create Time=26Oct2018:11:22:11
 
NOTE: 331 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 76.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_Y_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=Z:\github\fall_2_orange_hw\data_mining\hw2\hw_2_dave\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11869,
      Last Modified=26Oct2018:11:22:11,
      Create Time=26Oct2018:11:22:11
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=Z:\github\fall_2_orange_hw\data_mining\hw2\hw_2_dave\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11351,
      Last Modified=26Oct2018:11:22:11,
      Create Time=26Oct2018:11:22:11
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_Y_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable VIMPORTANCE is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: Variable RATIO is uninitialized.
NOTE: There were 16 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 16 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17422
17423  *------------------------------------------------------------*;
17424  * End SCORE: Tree;
17425  *------------------------------------------------------------*;
 
17426  proc sort data=WORK.EM_METACHANGE;
17427  by key uname;
17428  run;
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17429  filename x "Z:\github\fall_2_orange_hw\data_mining\hw2\hw_2_dave\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
17430  data _null_;
17431  file x;
17432  put 'if upcase(NAME) = "AGE" then do;';
17433  put 'ROLE = "REJECTED";';
17434  put 'end;';
17435  put 'else ';
17436  put 'if upcase(NAME) = "CONTACTS" then do;';
17437  put 'ROLE = "REJECTED";';
17438  put 'end;';
17439  put 'else ';
17440  put 'if upcase(NAME) = "DAY" then do;';
17441  put 'ROLE = "REJECTED";';
17442  put 'end;';
17443  put 'else ';
17444  put 'if upcase(NAME) = "DAYS_SINCE" then do;';
17445  put 'ROLE = "REJECTED";';
17446  put 'end;';
17447  put 'else ';
17448  put 'if upcase(NAME) = "DEFAULT" then do;';
17449  put 'ROLE = "REJECTED";';
17450  put 'end;';
17451  put 'else ';
17452  put 'if upcase(NAME) = "EDUCATION" then do;';
17453  put 'ROLE = "REJECTED";';
17454  put 'end;';
17455  put 'else ';
17456  put 'if upcase(NAME) = "JOB" then do;';
17457  put 'ROLE = "REJECTED";';
17458  put 'end;';
17459  put 'else ';
17460  put 'if upcase(NAME) = "LOAN" then do;';
17461  put 'ROLE = "REJECTED";';
17462  put 'end;';
17463  put 'else ';
17464  put 'if upcase(NAME) = "MORTGAGE" then do;';
17465  put 'ROLE = "REJECTED";';
17466  put 'end;';
17467  put 'else ';
17468  put 'if upcase(NAME) = "PHONE_TYPE" then do;';
17469  put 'ROLE = "REJECTED";';
17470  put 'end;';
17471  put 'else ';
17472  put 'if upcase(NAME) = "Q_YNO" then do;';
17473  put 'ROLE = "ASSESS";';
17474  put 'end;';
17475  put 'else ';
17476  put 'if upcase(NAME) = "Q_YYES" then do;';
17477  put 'ROLE = "ASSESS";';
17478  put 'end;';
17479  put 'else ';
17480  put 'if upcase(NAME) = "TOTAL_CONTACTS" then do;';
17481  put 'ROLE = "REJECTED";';
17482  put 'end;';
17483  put 'else ';
17484  put 'if upcase(NAME) = "_NODE_" then do;';
17485  put 'ROLE = "SEGMENT";';
17486  put 'LEVEL = "NOMINAL";';
17487  put 'end;';
17488  run;
 
NOTE: The file X is:
      Filename=Z:\github\fall_2_orange_hw\data_mining\hw2\hw_2_dave\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=26Oct2018:11:22:11,
      Create Time=24Oct2018:14:51:32
 
NOTE: 56 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 43.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17489  filename x;
NOTE: Fileref X has been deassigned.
 
17490  filename emflow "Z:\github\fall_2_orange_hw\data_mining\hw2\hw_2_dave\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17491  *------------------------------------------------------------*;
17492  * Tree: Scoring DATA data;
17493  *------------------------------------------------------------*;
17494  data EMWS1.Tree_TRAIN
17495  / view=EMWS1.Tree_TRAIN
17496  ;
17497  set EMWS1.Ids_DATA
17498  ;
17499  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file Z:\github\fall_2_orange_hw\data_mining\hw2\hw_2_dave\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17500 +****************************************************************;
17501 +******             DECISION TREE SCORING CODE             ******;
17502 +****************************************************************;
17503 +
17504 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17505 +LENGTH F_y  $    3;
17506 +LENGTH I_y  $    3;
17507 +LENGTH U_y  $    3;
17508 +LENGTH _WARN_  $    4;
17509 +
17510 +******              LABELS FOR NEW VARIABLES              ******;
17511 +label _NODE_ = 'Node' ;
17512 +label _LEAF_ = 'Leaf' ;
17513 +label P_yno = 'Predicted: y=no' ;
17514 +label P_yyes = 'Predicted: y=yes' ;
17515 +label Q_yno = 'Unadjusted P: y=no' ;
17516 +label Q_yyes = 'Unadjusted P: y=yes' ;
17517 +label R_yno = 'Residual: y=no' ;
17518 +label R_yyes = 'Residual: y=yes' ;
17519 +label F_y = 'From: y' ;
17520 +label I_y = 'Into: y' ;
17521 +label U_y = 'Unnormalized Into: y' ;
17522 +label _WARN_ = 'Warnings' ;
17523 +
17524 +
17525 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17526 +LENGTH _ARBFMT_3 $      3; DROP _ARBFMT_3;
17527 +_ARBFMT_3 = ' '; /* Initialize to avoid warning. */
17528 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17529 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17530 +LENGTH _ARBFMT_7 $      7; DROP _ARBFMT_7;
17531 +_ARBFMT_7 = ' '; /* Initialize to avoid warning. */
17532 +
17533 +
17534 +_ARBFMT_3 = PUT( y , $3.);
17535 + %DMNORMCP( _ARBFMT_3, F_y );
17536 +
17537 +******             ASSIGN OBSERVATION TO NODE             ******;
17538 +_ARBFMT_1 = PUT( ConsumerGroup , $1.);
17539 + %DMNORMIP( _ARBFMT_1);
17540 +IF _ARBFMT_1 IN ('B' ) THEN DO;
17541 +  IF  NOT MISSING(balance ) AND
17542 +                896373.5 <= balance  THEN DO;
17543 +    IF  NOT MISSING(balance ) AND
17544 +                 1146637.5 <= balance  THEN DO;
17545 +      _NODE_  =                   11;
17546 +      _LEAF_  =                    9;
17547 +      P_yno  =     0.05155746509129;
17548 +      P_yyes  =      0.9484425349087;
17549 +      Q_yno  =     0.05155746509129;
17550 +      Q_yyes  =      0.9484425349087;
17551 +      I_y  = 'YES' ;
17552 +      U_y  = 'yes' ;
17553 +      END;
17554 +    ELSE DO;
17555 +      _NODE_  =                   10;
17556 +      _LEAF_  =                    8;
17557 +      P_yno  =     0.23989361702127;
17558 +      P_yyes  =     0.76010638297872;
17559 +      Q_yno  =     0.23989361702127;
17560 +      Q_yyes  =     0.76010638297872;
17561 +      I_y  = 'YES' ;
17562 +      U_y  = 'yes' ;
17563 +      END;
17564 +    END;
17565 +  ELSE DO;
17566 +    _ARBFMT_7 = PUT( last_campaign_outcome , $7.);
17567 +     %DMNORMIP( _ARBFMT_7);
17568 +    IF _ARBFMT_7 IN ('SUCCESS' ) THEN DO;
17569 +      _NODE_  =                    8;
17570 +      _LEAF_  =                    1;
17571 +      P_yno  =     0.12443095599393;
17572 +      P_yyes  =     0.87556904400607;
17573 +      Q_yno  =     0.12443095599393;
17574 +      Q_yyes  =     0.87556904400607;
17575 +      I_y  = 'YES' ;
17576 +      U_y  = 'yes' ;
17577 +      END;
17578 +    ELSE DO;
17579 +      _ARBFMT_3 = PUT( val_email , $3.);
17580 +       %DMNORMIP( _ARBFMT_3);
17581 +      IF _ARBFMT_3 IN ('YES' ) THEN DO;
17582 +        IF  NOT MISSING(balance ) AND
17583 +          balance  <              87919.5 THEN DO;
17584 +          _NODE_  =                   36;
17585 +          _LEAF_  =                    2;
17586 +          P_yno  =     0.11666666666666;
17587 +          P_yyes  =     0.88333333333333;
17588 +          Q_yno  =     0.11666666666666;
17589 +          Q_yyes  =     0.88333333333333;
17590 +          I_y  = 'YES' ;
17591 +          U_y  = 'yes' ;
17592 +          END;
17593 +        ELSE DO;
17594 +          _ARBFMT_3 = PUT( month , $3.);
17595 +           %DMNORMIP( _ARBFMT_3);
17596 +          IF _ARBFMT_3 IN ('OCT' ,'NOV' ,'DEC' ,'FEB' ,'MAR' ,'APR' ,'SEP' )
17597 +           THEN DO;
17598 +            _NODE_  =                   73;
17599 +            _LEAF_  =                    4;
17600 +            P_yno  =     0.25749559082892;
17601 +            P_yyes  =     0.74250440917107;
17602 +            Q_yno  =     0.25749559082892;
17603 +            Q_yyes  =     0.74250440917107;
17604 +            I_y  = 'YES' ;
17605 +            U_y  = 'yes' ;
17606 +            END;
17607 +          ELSE DO;
17608 +            _NODE_  =                   72;
17609 +            _LEAF_  =                    3;
17610 +            P_yno  =     0.39740259740259;
17611 +            P_yyes  =      0.6025974025974;
17612 +            Q_yno  =     0.39740259740259;
17613 +            Q_yyes  =      0.6025974025974;
17614 +            I_y  = 'YES' ;
17615 +            U_y  = 'yes' ;
17616 +            END;
17617 +          END;
17618 +        END;
17619 +      ELSE DO;
17620 +        IF  NOT MISSING(balance ) AND
17621 +          balance  <              85386.5 THEN DO;
17622 +          _NODE_  =                   38;
17623 +          _LEAF_  =                    5;
17624 +          P_yno  =      0.3016453382084;
17625 +          P_yyes  =     0.69835466179159;
17626 +          Q_yno  =      0.3016453382084;
17627 +          Q_yyes  =     0.69835466179159;
17628 +          I_y  = 'YES' ;
17629 +          U_y  = 'yes' ;
17630 +          END;
17631 +        ELSE DO;
17632 +          _ARBFMT_3 = PUT( month , $3.);
17633 +           %DMNORMIP( _ARBFMT_3);
17634 +          IF _ARBFMT_3 IN ('OCT' ,'DEC' ,'MAR' ,'SEP' ) THEN DO;
17635 +            _NODE_  =                   77;
17636 +            _LEAF_  =                    7;
17637 +            P_yno  =     0.28857142857142;
17638 +            P_yyes  =     0.71142857142857;
17639 +            Q_yno  =     0.28857142857142;
17640 +            Q_yyes  =     0.71142857142857;
17641 +            I_y  = 'YES' ;
17642 +            U_y  = 'yes' ;
17643 +            END;
17644 +          ELSE DO;
17645 +            _NODE_  =                   76;
17646 +            _LEAF_  =                    6;
17647 +            P_yno  =     0.56392757660167;
17648 +            P_yyes  =     0.43607242339832;
17649 +            Q_yno  =     0.56392757660167;
17650 +            Q_yyes  =     0.43607242339832;
17651 +            I_y  = 'NO' ;
17652 +            U_y  = 'no' ;
17653 +            END;
17654 +          END;
17655 +        END;
17656 +      END;
17657 +    END;
17658 +  END;
17659 +ELSE DO;
17660 +  _ARBFMT_1 = PUT( ConsumerGroup , $1.);
17661 +   %DMNORMIP( _ARBFMT_1);
17662 +  IF _ARBFMT_1 IN ('C' ,'D' ) THEN DO;
17663 +    IF  NOT MISSING(balance ) AND
17664 +                    883671 <= balance  THEN DO;
17665 +      IF  NOT MISSING(balance ) AND
17666 +                     1167668 <= balance  THEN DO;
17667 +        _NODE_  =                   27;
17668 +        _LEAF_  =                   15;
17669 +        P_yno  =      0.1554054054054;
17670 +        P_yyes  =     0.84459459459459;
17671 +        Q_yno  =      0.1554054054054;
17672 +        Q_yyes  =     0.84459459459459;
17673 +        I_y  = 'YES' ;
17674 +        U_y  = 'yes' ;
17675 +        END;
17676 +      ELSE DO;
17677 +        _NODE_  =                   26;
17678 +        _LEAF_  =                   14;
17679 +        P_yno  =     0.53965183752417;
17680 +        P_yyes  =     0.46034816247582;
17681 +        Q_yno  =     0.53965183752417;
17682 +        Q_yyes  =     0.46034816247582;
17683 +        I_y  = 'NO' ;
17684 +        U_y  = 'no' ;
17685 +        END;
17686 +      END;
17687 +    ELSE DO;
17688 +      _ARBFMT_7 = PUT( last_campaign_outcome , $7.);
17689 +       %DMNORMIP( _ARBFMT_7);
17690 +      IF _ARBFMT_7 IN ('SUCCESS' ) THEN DO;
17691 +        _NODE_  =                   24;
17692 +        _LEAF_  =                   10;
17693 +        P_yno  =     0.34313725490196;
17694 +        P_yyes  =     0.65686274509803;
17695 +        Q_yno  =     0.34313725490196;
17696 +        Q_yyes  =     0.65686274509803;
17697 +        I_y  = 'YES' ;
17698 +        U_y  = 'yes' ;
17699 +        END;
17700 +      ELSE DO;
17701 +        _ARBFMT_3 = PUT( val_email , $3.);
17702 +         %DMNORMIP( _ARBFMT_3);
17703 +        IF _ARBFMT_3 IN ('YES' ) THEN DO;
17704 +          _NODE_  =                   50;
17705 +          _LEAF_  =                   11;
17706 +          P_yno  =     0.67977528089887;
17707 +          P_yyes  =     0.32022471910112;
17708 +          Q_yno  =     0.67977528089887;
17709 +          Q_yyes  =     0.32022471910112;
17710 +          I_y  = 'NO' ;
17711 +          U_y  = 'no' ;
17712 +          END;
17713 +        ELSE DO;
17714 +          _ARBFMT_3 = PUT( month , $3.);
17715 +           %DMNORMIP( _ARBFMT_3);
17716 +          IF _ARBFMT_3 IN ('OCT' ,'MAR' ) THEN DO;
17717 +            _NODE_  =                   95;
17718 +            _LEAF_  =                   13;
17719 +            P_yno  =     0.44155844155844;
17720 +            P_yyes  =     0.55844155844155;
17721 +            Q_yno  =     0.44155844155844;
17722 +            Q_yyes  =     0.55844155844155;
17723 +            I_y  = 'YES' ;
17724 +            U_y  = 'yes' ;
17725 +            END;
17726 +          ELSE DO;
17727 +            _NODE_  =                   94;
17728 +            _LEAF_  =                   12;
17729 +            P_yno  =     0.83568846533026;
17730 +            P_yyes  =     0.16431153466973;
17731 +            Q_yno  =     0.83568846533026;
17732 +            Q_yyes  =     0.16431153466973;
17733 +            I_y  = 'NO' ;
17734 +            U_y  = 'no' ;
17735 +            END;
17736 +          END;
17737 +        END;
17738 +      END;
17739 +    END;
17740 +  ELSE DO;
17741 +    IF  NOT MISSING(balance ) AND
17742 +                  993550.5 <= balance  THEN DO;
17743 +      IF  NOT MISSING(balance ) AND
17744 +                   1246600.5 <= balance  THEN DO;
17745 +        _NODE_  =                   31;
17746 +        _LEAF_  =                   22;
17747 +        P_yno  =     0.30337078651685;
17748 +        P_yyes  =     0.69662921348314;
17749 +        Q_yno  =     0.30337078651685;
17750 +        Q_yyes  =     0.69662921348314;
17751 +        I_y  = 'YES' ;
17752 +        U_y  = 'yes' ;
17753 +        END;
17754 +      ELSE DO;
17755 +        _ARBFMT_7 = PUT( last_campaign_outcome , $7.);
17756 +         %DMNORMIP( _ARBFMT_7);
17757 +        IF _ARBFMT_7 IN ('SUCCESS' ) THEN DO;
17758 +          _NODE_  =                   60;
17759 +          _LEAF_  =                   20;
17760 +          P_yno  =      0.3095238095238;
17761 +          P_yyes  =     0.69047619047619;
17762 +          Q_yno  =      0.3095238095238;
17763 +          Q_yyes  =     0.69047619047619;
17764 +          I_y  = 'YES' ;
17765 +          U_y  = 'yes' ;
17766 +          END;
17767 +        ELSE DO;
17768 +          _NODE_  =                   61;
17769 +          _LEAF_  =                   21;
17770 +          P_yno  =     0.77314814814814;
17771 +          P_yyes  =     0.22685185185185;
17772 +          Q_yno  =     0.77314814814814;
17773 +          Q_yyes  =     0.22685185185185;
17774 +          I_y  = 'NO' ;
17775 +          U_y  = 'no' ;
17776 +          END;
17777 +        END;
17778 +      END;
17779 +    ELSE DO;
17780 +      _ARBFMT_7 = PUT( last_campaign_outcome , $7.);
17781 +       %DMNORMIP( _ARBFMT_7);
17782 +      IF _ARBFMT_7 IN ('SUCCESS' ) THEN DO;
17783 +        _NODE_  =                   28;
17784 +        _LEAF_  =                   16;
17785 +        P_yno  =     0.71364653243847;
17786 +        P_yyes  =     0.28635346756152;
17787 +        Q_yno  =     0.71364653243847;
17788 +        Q_yyes  =     0.28635346756152;
17789 +        I_y  = 'NO' ;
17790 +        U_y  = 'no' ;
17791 +        END;
17792 +      ELSE DO;
17793 +        _ARBFMT_3 = PUT( val_email , $3.);
17794 +         %DMNORMIP( _ARBFMT_3);
17795 +        IF _ARBFMT_3 IN ('YES' ) THEN DO;
17796 +          _NODE_  =                   58;
17797 +          _LEAF_  =                   17;
17798 +          P_yno  =     0.90285161913968;
17799 +          P_yyes  =     0.09714838086031;
17800 +          Q_yno  =     0.90285161913968;
17801 +          Q_yyes  =     0.09714838086031;
17802 +          I_y  = 'NO' ;
17803 +          U_y  = 'no' ;
17804 +          END;
17805 +        ELSE DO;
17806 +          _ARBFMT_3 = PUT( month , $3.);
17807 +           %DMNORMIP( _ARBFMT_3);
17808 +          IF _ARBFMT_3 IN ('OCT' ,'DEC' ,'MAR' ,'SEP' ) THEN DO;
17809 +            _NODE_  =                  110;
17810 +            _LEAF_  =                   18;
17811 +            P_yno  =     0.83836589698046;
17812 +            P_yyes  =     0.16163410301953;
17813 +            Q_yno  =     0.83836589698046;
17814 +            Q_yyes  =     0.16163410301953;
17815 +            I_y  = 'NO' ;
17816 +            U_y  = 'no' ;
17817 +            END;
17818 +          ELSE DO;
17819 +            _NODE_  =                  111;
17820 +            _LEAF_  =                   19;
17821 +            P_yno  =     0.95696015740285;
17822 +            P_yyes  =     0.04303984259714;
17823 +            Q_yno  =     0.95696015740285;
17824 +            Q_yyes  =     0.04303984259714;
17825 +            I_y  = 'NO' ;
17826 +            U_y  = 'no' ;
17827 +            END;
17828 +          END;
17829 +        END;
17830 +      END;
17831 +    END;
17832 +  END;
17833 +
17834 +*****  RESIDUALS R_ *************;
17835 +IF  F_y  NE 'NO'
17836 +AND F_y  NE 'YES'  THEN DO;
17837 +        R_yno  = .;
17838 +        R_yyes  = .;
17839 + END;
17840 + ELSE DO;
17841 +       R_yno  =  -P_yno ;
17842 +       R_yyes  =  -P_yyes ;
17843 +       SELECT( F_y  );
17844 +          WHEN( 'NO'  ) R_yno  = R_yno  +1;
17845 +          WHEN( 'YES'  ) R_yyes  = R_yyes  +1;
17846 +       END;
17847 + END;
17848 +
17849 +****************************************************************;
17850 +******          END OF DECISION TREE SCORING CODE         ******;
17851 +****************************************************************;
17852 +
17853 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17854  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IDS_DATA.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.15 seconds
 
 
17855  quit;
17856  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
17858  proc sort data=WORK.EM_USER_REPORT;
17859  by ID VIEW;
17860  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17861  *------------------------------------------------------------*;
17862  * Tree: Computing metadata for TRAIN data;
17863  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
18267  data WORK.MODELTEMP_INFO;
18268  set EMWS1.Tree_EMINFO;
18269  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18270  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18271  data EMWS1.Tree_EMINFO;
18272  length TARGET KEY $32 DATA $43;
18273  input TARGET KEY DATA $;
18274  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
18278  run;
18279  data EMWS1.Tree_EMINFO;
18280  set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
18281  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
18282  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
18283  by TARGET KEY;
18284  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
18285  proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18286  by TARGET KEY;
18287  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
18288  proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18289  by TARGET KEY;
18290  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18291  data EMWS1.Tree_EMINFO;
18292  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18293  by TARGET KEY;
18294  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
18295  proc datasets lib=work nolist;
18296  delete TEMP_INFO SORTEDEMINFO;
18297  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18298  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                October 26, 2018
Time:                11:22:14
*------------------------------------------------------------*
18322  data EMWS1.Tree_EMOUTFIT;
18323  set EMWS1.Tree_EMOUTFIT;
18324  length TargetLabel $200;
18325  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18326  if upcase(TARGET) eq "Y" then TargetLabel = 'y';
18327  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
18328  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
18329  by TARGET;
18330  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
18331  %let _EMwarndup = 0;
18332  %let _EMtargetdup =;
18333  %let _EMASEtargetdup =;
18334  data _null_;
18335  set EMWS1.Tree_EMOUTFIT;
18336  if .<_ASE_<0.000001 then do;
18337  call symput('_EMwarndup', '1');
18338  call symput('_EMtargetdup', target);
18339  call symput('_EMASEtargetdup', put(_ASE_, best.));
18340  end;
18341  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18342  %let EMEXCEPTIONSTRING=;
18343  *------------------------------------------------------------*;
18344  * REPORT: Tree;
18345  *------------------------------------------------------------*;
18346  %let EM_ACTION = REPORT;
18347  %let syscc = 0;
18348  %macro main;
18349
18350    %if %upcase(&EM_ACTION) = CREATE %then %do;
18351      filename temp catalog 'sashelp.emmodl.tree_create.source';
18352      %include temp;
18353      filename temp;
18354
18355      %em_tree_create;
18356    %end;
18357
18358     %else
18359     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18360
18361         filename temp catalog 'sashelp.emmodl.tree_train.source';
18362         %include temp;
18363         filename temp;
18364         %em_tree_train;
18365     %end;
18366
18367    %else
18368    %if %upcase(&EM_ACTION) = SCORE %then %do;
18369      filename temp catalog 'sashelp.emmodl.tree_score.source';
18370      %include temp;
18371      filename temp;
18372
18373      %em_tree_score;
18374
18375    %end;
18376
18377    %else
18378    %if %upcase(&EM_ACTION) = REPORT %then %do;
18379
18380         filename temp catalog 'sashelp.emmodl.tree_report.source';
18381         %include temp;
18382         filename temp;
18383
18384         %em_tree_report;
18385     %end;
18386
18387    %else
18388    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18389
18390         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18391         %include temp;
18392         filename temp;
18393         %EM_TREE_OPENTREEVIEWER;
18394
18395     %end;
18396
18397    %else
18398    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18399
18400         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18401         %include temp;
18402         filename temp;
18403         %EM_TREE_CLOSETREEVIEWER;
18404
18405     %end;
18406
18407
18408     %doendm:
18409  %mend main;
18410
18411  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18413 +%macro em_tree_makePlotDs( multipleTar= );
18415 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18416 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18417 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18418 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18420 +  /* determine if validation statistics will be displayed */
18421 +  %let validflag=N;
18422 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18423 +    /* determine if validation data exists */
18424 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18425 +      %let validflag=Y;
18426 +    %end;
18427 +  %end;
18429 +   /* retrieve name of decmeta even in presence of multiple targets */
18430 +   %let decmeta = ;
18431 +   %if &EM_DEC_DECMETA eq %then %do;
18432 +     data _Target;
18433 +       set &em_data_variableset;
18434 +       where ROLE='TARGET' and USE in('D', 'Y');
18435 +       keep NAME;
18436 +     run;
18437 +     proc sort data=_Target;
18438 +       by NAME;
18439 +     run;
18440 +     proc sort data=EM_TARGETDECINFO;
18441 +       by TARGET;
18442 +     run;
18443 +     data _Target;
18444 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18445 +       by NAME;
18446 +       if _a then do;
18447 +         call symput('decmeta', trim(DECMETA));
18448 +       end;
18449 +     run;
18450 +     proc delete data=_Target;run;
18451 +   %end;
18452 +   %else %let decmeta = &EM_DEC_DECMETA;
18455 +  /* retrieve targetEvent from decmeta */
18456 +  %let targetEvent=;
18457 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18458 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18459 +      data _null_;
18460 +       set &DECMETA(where=(_TYPE_="TARGET"));
18461 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18462 +      run;
18463 +    %end;
18464 +  %end;
18466 +  /* retrieve predicted var for targetEvent from decmeta */
18467 +  %let predTarget=;
18468 +  %let predLvl=;
18469 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18470 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18471 +      data _null_;
18472 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18473 +       call symput('predTarget', strip(VARIABLE));
18474 +       call symput('predLvl', strip(LEVEL));
18475 +      run;
18476 +    %end;
18477 +  %end;
18478 +  %else %do;
18479 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18480 +      data _null_;
18481 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18482 +       call symput('predTarget', strip(VARIABLE));
18483 +      run;
18484 +    %end;
18485 +  %end;
18487 +  /* create BelowText value */
18488 +  data belowtext;
18489 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18490 +    keep node belowtext;
18491 +  run;
18493 +  /* replace belowtext with variable label if it exists */
18494 +  data belowtext2;
18495 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18496 +    keep node belowtextlbl;
18497 +  run;
18499 +  proc sort data=belowtext; by node; run;
18500 +  proc sort data=belowtext2; by node; run;
18502 +  data belowtext;
18503 +    merge belowtext belowtext2(in=_a);
18504 +    by node;
18505 +    if _a then belowtext=belowtextlbl;
18506 +    keep node belowtext;
18507 +  run;
18509 +  /* create AboveText value */
18510 +  data abovetext;
18511 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18512 +  run;
18513 +  proc sort data=abovetext; by node numeric_value; run;
18515 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18516 +  data abovetext;
18517 +    set abovetext(rename=(node=parent));
18518 +    by parent numeric_value;
18519 +    retain abovetext tempstring flag branch origval origchar ;
18520 +    length abovetext $256;
18521 +    length tempstring origchar $64;
18523 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18524 +      if first.parent then do;
18525 +        if missing(character_value) then do;
18526 +          numeric_value = round(numeric_value, &sp_precision);
18527 +          abovetext = "< "||strip(NUMERIC_VALUE);
18528 +          branch = 1;
18529 +          origval = numeric_value;
18530 +          output;
18531 +        end;
18532 +        else do;
18533 +          abovetext = "< "||strip(CHARACTER_VALUE);
18534 +          branch = 1;
18535 +          origchar = character_value;
18536 +          output;
18537 +        end;
18539 +        if first.parent AND last.parent then do;
18540 +          if missing(character_value) then do;
18541 +            numeric_value = round(numeric_value, &sp_precision);
18542 +            branch = branch + 1;
18543 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18544 +            output;
18545 +          end;
18546 +          else do;
18547 +            branch = branch + 1;
18548 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18549 +            output;
18550 +          end;
18551 +        end;
18552 +      end;
18553 +      else if last.parent then do;
18554 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18555 +          if missing(character_value) then do;
18556 +            numeric_value = round(numeric_value, &sp_precision);
18557 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18558 +          end;
18559 +          else do;
18560 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18561 +          end;
18562 +          branch = branch + 1;
18563 +          output;
18565 +          if missing(character_value) then do;
18566 +            numeric_value = round(numeric_value, &sp_precision);
18567 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18568 +          end;
18569 +          else do;
18570 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18571 +          end;
18572 +          branch = branch + 1;
18573 +          output;
18574 +        end;
18575 +        else do;
18576 +          if missing(character_value) then do;
18577 +            numeric_value = round(numeric_value, &sp_precision);
18578 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18579 +          end;
18580 +          else do;
18581 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18582 +          end;
18583 +          branch = branch + 1;
18584 +          output;
18585 +        end;
18586 +      end;
18587 +      else do;
18588 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18589 +          if missing(character_value) then do;
18590 +            numeric_value = round(numeric_value,&sp_precision);
18591 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18592 +            origval = numeric_value;
18593 +          end;
18594 +          else do;
18595 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18596 +            origchar = character_value;
18597 +          end;
18598 +          branch = branch + 1;
18599 +          output;
18601 +        end;
18602 +        else do;
18603 +          if missing(character_value) then do;
18604 +            numeric_value = round(numeric_value, &sp_precision);
18605 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18606 +            origval = numeric_value;
18607 +          end;
18608 +          else do;
18609 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18610 +            origval = character_value;
18611 +          end;
18612 +          branch = branch + 1;
18613 +          output;
18614 +        end;
18615 +      end;
18616 +    end;
18617 +    else do;
18618 +       if first.numeric_value then do;
18619 +         flag = 0;
18620 +         abovetext = strip(CHARACTER_VALUE);
18621 +         branch = numeric_value;
18622 +         if first.numeric_value AND last.numeric_value then do;
18623 +           output;
18624 +         end;
18625 +       end;
18626 +       else if last.numeric_value then do;
18627 +         if flag=0 then do;
18628 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18629 +           length = length(strip(tempstring));
18630 +           if length < 32 then do;
18631 +             abovetext = strip(tempstring);
18632 +           end;
18633 +           else do;
18634 +             abovetext = strip(abovetext)||", ...";
18635 +             flag = 1;
18636 +           end;
18637 +         end;
18638 +         branch = numeric_value;
18639 +         output;
18640 +       end;
18641 +       else do;
18642 +         if flag=0 then do;
18643 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18644 +           length = length(strip(tempstring));
18645 +           if length < 32 then do;
18646 +             abovetext = strip(tempstring);
18647 +           end;
18648 +           else do;
18649 +             abovetext = strip(abovetext)||", ...";
18650 +             flag=1;
18651 +           end;
18652 +         end;
18653 +         branch = numeric_value;
18654 +       end;
18655 +    end;
18656 +    keep parent branch abovetext;
18657 +  run;
18659 +  /* Missing value to abovetext */
18660 +  data tempmissing;
18661 +    set &EM_USER_OUTRULES;
18662 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18663 +    rename node=parent numeric_value=branch character_value=misschar;
18664 +  run;
18667 +  proc sort data=abovetext; by parent branch; run;
18668 +  proc sort data=tempmissing; by parent branch; run;
18669 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18671 +  data tempoutnodes;
18672 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18673 +    by parent branch;
18674 +    length traintotal validtotal 8;
18675 +    retain traintotal validtotal;
18677 +    if _a then do;
18678 +      if ^MISSING(abovetext) then do;
18679 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18680 +      end;
18681 +      else do;
18682 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18683 +      end;
18684 +    end;
18685 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18687 +    if node=1 then do;
18688 +      traintotal = N;
18689 +      validtotal=VN;
18690 +    end;
18692 +    drop role rank stat misschar belowtext;
18693 +  run;
18694 +  proc sort data=tempoutnodes; by node; run;
18695 +  proc sort data=belowtext; by node; run;
18697 +  data tempoutnodes;
18698 +    merge tempoutnodes belowtext;
18699 +    by node;
18701 +  run;
18703 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18704 +  %let adjusted = N;
18705 +  %let npriors = 0;
18706 +  data _null_ ;
18707 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18708 +    if eof then do ;
18709 +      call symput("npriors" , strip(put(_N_,best.))) ;
18710 +    end;
18711 +  run;
18712 +  %if &npriors gt 0 %then %let adjusted=Y;
18715 +  /* create a table with targetUsed and targetLevel columns for each node */
18716 +  data temptarmeta;
18717 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18718 +    %if &multipleTar eq N %then %do;
18719 +      AND USE in ('D', 'Y')
18720 +    %end;
18721 +    ));
18722 +    length TARGET $32;
18723 +    Target=name;
18724 +    keep target level;
18725 +  run;
18727 +  %if &multipleTar eq Y %then %do;
18728 +    data temptargetused;
18729 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18730 +      keep node target;
18731 +    run;
18732 +    proc sort data=temptargetused; by target; run;
18733 +    proc sort data=temptarmeta; by target; run;
18734 +    data temptargetused;
18735 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18736 +      by target;
18737 +      if _a and _b;
18738 +    run;
18739 +  %end;
18740 +  %else %do;
18741 +    data temptargetused;
18742 +      set &EM_USER_OUTSTATS;
18743 +      length target $32 tarlevel $10;
18744 +      target="%EM_TARGET";
18745 +      tarlevel="%EM_TARGET_LEVEL";
18746 +      keep node target tarlevel;
18747 +    run;
18748 +    proc sort data=temptargetused nodupkey; by node; run;
18749 +  %end;
18751 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
18752 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18753 +  proc sort data=temptargetused; by node; run;
18756 +  /* create tables for all interval targets as well as all class targets */
18757 +  data tempinterval tempclass;
18758 +    merge tempoutstats temptargetused( rename=(target=targetused));
18759 +    by node;
18760 +    %if "&multipleTar" eq "Y" %then %do;
18761 +      if ((missing(Target)) OR (target=targetused ));
18762 +    %end;
18764 +    if tarlevel="INTERVAL" then output tempinterval;
18765 +    else output tempclass;
18766 +  run;
18768 +  /* initialize intTarget and classTarget flags */
18769 +  %let em_intNobs =0;
18770 +  %let em_classNobs = 0;
18771 +  %let em_intTarget= N;
18772 +  %let em_classTarget= N;
18774 +  proc sql;
18775 +    reset noprint;
18776 +    select count(*) into :em_intNobs from tempinterval;
18777 +  quit;
18778 +  proc sql;
18779 +    reset noprint;
18780 +    select count(*) into :em_classNobs from tempclass;
18781 +  quit;
18783 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18784 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18786 +  /* retrieve all information for interval targets */
18787 +  %if &em_intTarget eq Y %then %do;
18789 +    /* determine if leaf variable exists */
18790 +    %let dsid=%sysfunc(open(tempinterval,i));
18791 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18792 +    %let rc=%sysfunc(close(&dsid));
18794 +    proc transpose data=tempinterval
18795 +      %if &leafexists %then %do;
18796 +        (drop=leaf)
18797 +      %end;
18798 +      %if &validexist %then %do;
18799 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18800 +      %end;
18801 +      %else %do;
18802 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18803 +      %end;
18804 +      by node;
18805 +      id statname;
18806 +    run;
18807 +    data tempinterval;
18808 +      set tempinterval;
18809 +      if missing(N) then delete;
18810 +    run;
18811 +  %end;
18813 +  /* retrieve all information for class targets */
18814 +  %if &em_classTarget eq Y %then %do;
18815 +    proc sort data=tempclass; by node category; run;
18816 +    %if &validflag eq N %then %do;
18817 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18818 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18819 +    %end;
18820 +    %else %do;
18821 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18822 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18823 +    %end;
18824 +      set tempclass;
18826 +      %if &validflag eq N %then %do;
18827 +        %if "&adjusted" eq "N" %then %do;
18828 +          if statname="N" then output tempn;
18829 +        %end;
18830 +        %else %do;
18831 +          if statname="NPRIORS" then output tempn;
18832 +        %end;
18833 +        else if statname="PREDICTION" then output temppredict;
18834 +        else if statname="PROBABILITY" then output tempprob;
18835 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18836 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18837 +      %end;
18838 +      %else %do;
18839 +        %if "&adjusted" eq "N" %then %do;
18840 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18841 +        %end;
18842 +        %else %do;
18843 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18844 +        %end;
18845 +        else if statname="PREDICTION" then output temppredict;
18846 +        else if statname="PROBABILITY" then output tempprob;
18847 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18848 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18849 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18850 +      %end;
18851 +    run;
18854 +    /* determine if profit/loss exists in tempprofit */
18855 +    %let em_profitflag=0;
18856 +    %let em_lossflag=0;
18857 +    proc sql;
18858 +      reset noprint;
18859 +      select count(*) into :em_profitflag from tempprofit;
18860 +    quit;
18861 +    proc sql;
18862 +      reset noprint;
18863 +      select count(*) into :em_lossflag from temploss;
18864 +    quit;
18866 +    %if &validFlag eq Y %then %do;
18867 +      proc transpose data=tempn
18868 +        %if "&adjusted" eq "N" %then %do;
18869 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18870 +        %end;
18871 +        %else %do;
18872 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18873 +        %end;
18874 +        by node;
18875 +        id statname;
18876 +      run;
18877 +      %if &em_profitflag ne 0 %then %do;
18878 +        proc transpose data=tempprofit out=tempprofit;
18879 +          by node category;
18880 +          id statname ;
18881 +        run;
18882 +      %end;
18883 +      %if &em_lossflag ne 0 %then %do;
18884 +        proc transpose data=temploss out=temploss;
18885 +          by node category;
18886 +          id statname ;
18887 +        run;
18888 +      %end;
18889 +      data tempprob;
18890 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18891 +        by node
18892 +        %if &multipleTar eq Y %then %do;
18893 +          target
18894 +        %end;
18895 +        category;
18896 +      run;
18897 +    %end;
18899 +    /* store percentcorrect value */
18900 +    data temppredict;
18901 +      merge tempprob temppredict(in=_a);
18902 +      by node category;
18903 +      if _a then do;
18904 +        percentCorrect = statvalue;
18905 +        %if &validFlag eq Y %then %do;
18906 +          vpercentCorrect= vstatvalue;
18907 +        %end;
18908 +      end;
18909 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18910 +      %if &validFlag eq Y %then %do;
18911 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18912 +      %end;
18913 +      ;
18914 +      if missing(percentCorrect) then delete;
18915 +      drop target;
18916 +    run;
18918 +    /* build profittext */
18919 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18920 +      data tempprofittext(keep= node profittext profitloss);
18921 +        length profittext $800 profitloss 8.;
18922 +        retain profittext profitloss;
18924 +        merge tempprob
18925 +        %if &em_profitflag ne 0 %then %do;
18926 +          tempprofit
18927 +        %end;
18928 +        %else %if &em_lossflag ne 0 %then %do;
18929 +          temploss
18930 +        %end;
18931 +        ;
18932 +        by node category;
18934 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18935 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18936 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18937 +          %let profittype = ALL;
18938 +        %end;
18940 +        /* create the profitloss variable for nodecolor if selected */
18941 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18943 +        %if "&profittype" eq "ALL" %then %do;
18944 +          if strip(CATEGORY)="&targetEvent" then do;
18945 +            profitloss=statvalue;
18946 +          end;
18947 +          if first.node then do;
18948 +            %if &validFlag eq N %then %do;
18949 +             %if &em_profitflag ne 0 %then %do;
18950 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18951 +             %end;
18952 +             %if &em_lossflag ne 0 %then %do;
18953 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18954 +             %end;
18955 +            %end;
18956 +            %else %do;
18957 +             %if &em_profitflag ne 0 %then %do;
18958 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18958!+;
18959 +             %end;
18960 +             %if &em_lossflag ne 0 %then %do;
18961 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18962 +             %end;
18963 +            %end;
18964 +          end;
18965 +          else if last.node then do;
18966 +            %if &validFlag eq N %then %do;
18967 +             %if &em_profitflag ne 0 %then %do;
18968 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18969 +             %end;
18970 +             %if &em_lossflag ne 0 %then %do;
18971 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18972 +             %end;
18973 +             /*if CATEGORY="&targetEvent" then do;
18974 +               profitloss=statvalue;
18975 +             end;*/
18976 +            %end;
18977 +            %else %do;
18978 +             %if &em_profitflag ne 0 %then %do;
18979 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18979!+14.&EM_PROPERTY_SPLITPRECISION);
18980 +                if CATEGORY="&targetEvent" then do;
18981 +                 profitloss=ALTERNATIVE_PROFIT;
18982 +                end;
18983 +             %end;
18984 +             %if &em_lossflag ne 0 %then %do;
18985 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18985!+14.&EM_PROPERTY_SPLITPRECISION);
18986 +                if CATEGORY="&targetEvent" then do;
18987 +                  profitloss=ALTERNATIVE_LOSS;
18988 +                end;
18989 +             %end;
18990 +            %end;
18991 +            output;
18992 +          end;
18993 +          else do;
18994 +            %if &validFlag eq N %then %do;
18995 +             %if &em_profitflag ne 0 %then %do;
18996 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18997 +             %end;
18998 +             %if &em_lossflag ne 0 %then %do;
18999 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19000 +             %end;
19001 +            %end;
19002 +            %else %do;
19003 +             %if &em_profitflag ne 0 %then %do;
19004 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19004!+14.&EM_PROPERTY_SPLITPRECISION);
19005 +             %end;
19006 +             %if &em_lossflag ne 0 %then %do;
19007 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19007!+14.&EM_PROPERTY_SPLITPRECISION);
19008 +             %end;
19009 +            %end;
19010 +          end;
19011 +        %end;
19012 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19013 +          if strip(CATEGORY) = "&targetevent" then do;
19014 +            %if &validFlag eq N %then %do;
19015 +             %if &em_profitflag ne 0 %then %do;
19016 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19017 +             %end;
19018 +             %if &em_lossflag ne 0 %then %do;
19019 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19020 +             %end;
19021 +             profitloss=statvalue;
19022 +            %end;
19023 +            %else %do;
19024 +             %if &em_profitflag ne 0 %then %do;
19025 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19025!+;
19026 +                profitloss=ALTERNATIVE_PROFIT;
19027 +             %end;
19028 +             %if &em_lossflag ne 0 %then %do;
19029 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19030 +                profitloss=ALTERNATIVE_LOSS;
19031 +             %end;
19032 +            %end;
19033 +            output;
19034 +          end;
19035 +        %end;
19036 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19037 +          if strip(CATEGORY) = "&targetevent" then do;
19038 +            %if &validFlag eq N %then %do;
19039 +             profitloss=statvalue;
19040 +            %end;
19041 +            %else %do;
19042 +             %if &em_profitflag ne 0 %then %do;
19043 +                profitloss=ALTERNATIVE_PROFIT;
19044 +             %end;
19045 +             %if &em_lossflag ne 0 %then %do;
19046 +                profitloss=ALTERNATIVE_LOSS;
19047 +             %end;
19048 +            %end;
19049 +            output;
19050 +          end;
19051 +        %end;
19052 +      run;
19053 +    %end;
19055 +    data tempprob(keep= node probtext);
19056 +      length probtext $800;
19057 +      retain probtext;
19058 +      set tempprob ;
19059 +      by node;
19061 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19062 +      %let probtype = &EM_PROPERTY_TARGET;
19063 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19064 +        %let probtype = ALL;
19065 +      %end;
19067 +      %if "&probtype" eq "ALL" %then %do;
19068 +        if first.node then do;
19069 +          %if &validFlag eq N %then %do;
19070 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19071 +          %end;
19072 +          %else %do;
19073 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19074 +          %end;
19075 +        end;
19076 +        else if last.node then do;
19077 +          %if &validFlag eq N %then %do;
19078 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19079 +          %end;
19080 +          %else %do;
19081 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19082 +          %end;
19083 +          output;
19084 +        end;
19085 +        else do;
19086 +          %if &validFlag eq N %then %do;
19087 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19088 +          %end;
19089 +          %else %do;
19090 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19091 +          %end;
19092 +        end;
19093 +      %end;
19094 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19095 +        if strip(CATEGORY) = "&targetevent" then do;
19096 +          %if &validFlag eq N %then %do;
19097 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19098 +          %end;
19099 +          %else %do;
19100 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19101 +          %end;
19102 +          output;
19103 +        end;
19104 +      %end;
19105 +      %else %if "&probtype" eq "NONE" %then %do;
19106 +        if last.node then do;
19107 +          output;
19108 +        end;
19109 +      %end;
19110 +    run;
19111 +  %end;
19113 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19115 +  %let oldexists=0;
19116 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19117 +     data old_tree_plot;
19118 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19119 +        rename nodecolor=oldnodecolor;
19120 +     run;
19122 +     proc sort data=old_tree_plot;
19123 +        by node;
19124 +     run;
19126 +     %let oldexists=1;
19127 +  %end;
19129 +  data &EM_USER_TREE_PLOT;
19130 +    length textall $800;
19131 +    merge tempoutnodes temptargetused
19133 +    %if &em_intTarget eq Y %then %do;
19134 +      tempinterval
19135 +    %end;
19137 +    %if &em_classTarget eq Y %then %do;
19139 +      %if &validFlag eq N %then %do;
19140 +        tempn(rename=(statvalue=N))
19141 +      %end;
19142 +      %else %do;
19143 +        tempn
19144 +      %end;
19146 +      temppredict tempprob
19148 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19149 +        tempprofittext
19150 +      %end;
19151 +    %end;
19152 +    ;
19153 +    by node;
19155 +    /* build nodetext based on user selection */
19156 +    textall="";
19158 +    %if &em_intTarget eq Y %then %do;
19159 +    if tarlevel="INTERVAL" then do;
19160 +      /* Nodeid */
19161 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19162 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19163 +      %end;
19165 +      /* Target identifier if multiple targets are used */
19166 +      %if "&multipleTar" eq "Y" %then %do;
19167 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19168 +      %end;
19170 +      %if &validFlag eq Y %then %do;
19171 +         /* Column labels displayed in validflag eq Y only */
19172 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19173 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19173!+noquote ))";
19174 +         %end;
19176 +         /* Average values */
19177 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19178 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19179 +         %end;
19181 +         /* RASE */
19182 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19183 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19184 +         %end;
19186 +         /* Count */
19187 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19188 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19189 +         %end;
19190 +      %end;
19191 +      %else %do;
19192 +         /* Average values */
19193 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19194 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19195 +         %end;
19197 +         /* RASE */
19198 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19199 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19200 +         %end;
19202 +         /* Count */
19203 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19204 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19205 +         %end;
19206 +      %end;
19208 +      /* nodecolor */
19209 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19210 +        nodecolor=PREDICTION;
19211 +      %end;
19212 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19213 +        nodecolor=RASE;
19214 +      %end;
19215 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19216 +        nodecolor=1;
19217 +      %end;
19219 +    end;
19220 +    %end;
19221 +    %if &em_classTarget eq Y %then %do;
19222 +    if tarlevel^="INTERVAL" then  do;
19224 +      /* Nodeid */
19225 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19226 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19227 +      %end;
19228 +      /* Target identifier if multiple targets are used */
19229 +      %if "&multipleTar" eq "Y" %then %do;
19230 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19231 +      %end;
19233 +      /* Predicted values */
19234 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19235 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19236 +      %end;
19238 +      /* Column labels displayed in validflag eq Y only */
19239 +      %if "&ValidFlag" eq "Y" %then %do;
19240 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19241 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19241!+noquote ))";
19242 +        %end;
19243 +      %end;
19245 +      /* Target Values */
19246 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19247 +        textall=strip(textall)||"0A"x||strip(probtext);
19248 +      %end;
19250 +      /* include profit or loss for all target levels */
19251 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19252 +        textall=strip(textall)||"0A"x||strip(profittext);
19253 +      %end;
19255 +      %if &validFlag eq N %then %do;
19256 +        /* Percent Correct */
19257 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19258 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19259 +        %end;
19261 +         /* Count */
19262 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19263 +          %if "&adjusted" eq "N" %then %do;
19264 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19265 +          %end;
19266 +          %else %do;
19267 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19268 +          %end;
19269 +         %end;
19270 +      %end;
19271 +      %else %do;
19272 +        /* Percent Correct */
19273 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19274 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19275 +        %end;
19277 +         /* Count */
19278 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19279 +          %if "&adjusted" eq "N" %then %do;
19280 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19281 +          %end;
19282 +          %else %do;
19283 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19284 +          %end;
19285 +         %end;
19286 +      %end;
19288 +      /* nodecolor */
19289 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19290 +       %if &multipleTar ne Y %then %do;
19291 +        nodecolor=&predTarget;
19292 +       %end;
19293 +       %else %do;
19294 +         nodecolor=percentcorrect;
19295 +       %end;
19296 +      %end;
19297 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19298 +        nodecolor=percentcorrect;
19299 +      %end;
19300 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19301 +        nodecolor=1;
19302 +      %end;
19303 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19304 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19305 +          nodecolor=percentcorrect;
19306 +        %end;
19307 +        %else %do;
19308 +          nodecolor=profitloss;
19309 +        %end;
19310 +      %end;
19312 +    end;
19313 +    %end;
19314 +    %if &em_intTarget eq Y %then %do;
19315 +     drop  PREDICTION  TARGET TARLEVEL
19316 +     %if &ValidFlag eq Y %then %do;
19317 +         VPREDICTION
19318 +     %end;
19319 +     ;
19320 +    %end;
19321 +    %if &em_classTarget eq Y %then %do;
19322 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19323 +     %if &ValidFlag eq Y %then %do;
19324 +         VSTATVALUE
19325 +     %end;
19326 +     ;
19327 +    %end;
19329 +  run;
19331 +  /* add leaf index information to plotds - based on primary target only*/
19332 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19333 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19334 +      set &EM_USER_OUTSTATS;
19335 +      if ((statname="PROBABILITY"
19336 +      %if &validexist %then %do;
19337 +       or statname="VALID: PROBABILITY"
19338 +      %end;
19339 +      ) AND (CATEGORY="&TARGETEVENT")
19340 +      %if "&multipleTar" eq "Y" %then %do;
19341 +        AND (Target="%EM_TARGET")
19342 +      %end;
19343 +      );
19344 +    run;
19346 +    %if &validexist %then %do;
19347 +      proc sort data=tempprob; by node; run;
19348 +      %let vpredTarget = V%substr(&predTarget, 2);
19349 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19350 +         by node;
19351 +         id statname;
19352 +      run;
19353 +    %end;
19354 +  %end;
19355 +  %else %do;
19356 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19357 +      set &EM_USER_OUTSTATS;
19358 +      if ((statname="PREDICTION"
19359 +      %if &validexist %then %do;
19360 +       or statname="VALID: PREDICTION"
19361 +      %end;
19362 +      )
19363 +      %if "&multipleTar" eq "Y" %then %do;
19364 +        AND (Target="%EM_TARGET")
19365 +      %end;
19366 +      );
19367 +    run;
19368 +    %if &validexist %then %do;
19369 +      proc sort data=tempprob; by node; run;
19370 +      %let vpredTarget = V%substr(&predTarget, 2);
19371 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19372 +         by node;
19373 +         id statname;
19374 +      run;
19375 +    %end;
19376 +  %end;
19378 +  proc sort data=tempprob; by node; run;
19379 +  data tempoutnodes;
19380 +    merge tempoutnodes tempprob;
19381 +    by node;
19382 +  run;
19384 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19385 +  data tempnodes;
19386 +    retain traintotal validtotal;
19387 +    set tempnodes(where=(leaf ne . ));
19388 +    tprob=round(&predTarget, .01);
19389 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19390 +      percevent_train=round(tprob*100, .01);
19391 +    %end;
19392 +    %else %do;
19393 +      percevent_train=tprob;
19394 +    %end;
19396 +    perc_train=round((n/traintotal)*100, 0.01);
19397 +    /* leafwidth already has a *10 multiplier */
19398 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19400 +    %if &validexist %then %do;
19401 +      %let vpredTarget = V%substr(&predTarget,2);
19402 +      vprob=round(&vpredTarget, .01);
19403 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19404 +        percevent_valid=round(vprob*100, .01);
19405 +      %end;
19406 +      %else %do;
19407 +        percevent_valid=vprob;
19408 +      %end;
19409 +      perc_valid=round((vn/validtotal)*100, .01);
19410 +    %end;
19412 +    index=_N_;
19413 +    keep node index tprob perc_train percevent_train
19414 +    %if &validexist %then %do;
19415 +        vprob percevent_valid perc_valid
19416 +    %end;
19417 +    ;
19418 +  run;
19419 +  proc sort data=tempnodes; by node; run;
19420 +  data &EM_USER_TREE_PLOT;
19421 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19422 +    by node;
19423 +    if missing(node) then delete;
19424 +    %if &oldexists %then %do;
19425 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19426 +      drop oldnodecolor;
19427 +    %end;
19428 +    abovetext = compbl(abovetext);
19430 +    /* add variable labels */
19431 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19432 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19433 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19434 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19435 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19436 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19438 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19439 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19440 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19441 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19442 +          %end;
19443 +          %else %do;
19444 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19445 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19446 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19447 +          %end;
19448 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19450 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19451 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19452 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19453 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19454 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19455 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19456 +          %end;
19457 +          %else %do;
19458 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19459 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19460 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19461 +          %end;
19462 +    ;
19463 +  run;
19465 +  /* delete temporary tables */
19466 +  proc datasets lib=work nolist;
19467 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19468 +  run;
19470 +%mend em_tree_makePlotDs;
19474 +%macro em_tree_report;
19476 +   /* report properties */
19477 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19478 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19479 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19480 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19481 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19482 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19483 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19484 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19485 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19486 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19487 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19488 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19489 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19491 +   %let validexist=0;
19492 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19493 +     %let validexist=1;
19494 +   %end;
19496 +   /* determine if multiple targets will be processed */
19497 +   %let em_tree_multipleTargets=N;
19498 +   %let em_tree_numTarget=1;
19499 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19500 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19501 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19502 +         %let em_tree_multipleTargets=N;
19503 +      %end;
19504 +      %else %do;
19505 +        data _null_;
19506 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19507 +          if eof then
19508 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19509 +        run;
19511 +        %if &em_tree_numTarget gt 1 %then %do;
19512 +           %let em_tree_multipleTargets=Y;
19513 +        %end;
19514 +     %end;
19515 +   %end;
19517 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19519 +   /* variable importance */
19520 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19521 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19523 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19524 +     /* and the columns may not be generated                                                                                 */
19525 +     %let em_tree_cvexists=;
19526 +     %let em_tree_surrexists=.;
19527 +     data _null_;
19528 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19529 +       if eof then do ;
19530 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19531 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19532 +       end;
19533 +     run;
19535 +     data &EM_USER_OUTIMPORT;
19536 +         set &EM_USER_OUTIMPORT;
19537 +         /* format columns based on Precison value specified */
19538 +         format importance 15.&EM_PROPERTY_PRECISION
19539 +              %if &validexist %then %do;
19540 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19541 +              %end;
19542 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19543 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19544 +              %end;
19545 +         ;
19546 +     run;
19548 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19549 +     proc print data=&EM_USER_OUTIMPORT
19550 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19551 +          (where=((nrules>0) OR (nsurrogates>0)))
19552 +        %end;
19553 +        %else %do;
19554 +           (where=(nrules>0))
19555 +        %end;
19556 +        label noobs
19557 +        ;
19558 +     run;
19559 +     title10;
19561 +   %end;
19563 +   /* Sequence */
19564 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19565 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19566 +   data _null_ ;
19567 +      set &EM_USER_outseq (obs=2) end=eof ;
19568 +      if eof then do ;
19569 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19570 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19571 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19572 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19573 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19574 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19575 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19576 +      end;
19577 +    run;
19579 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19580 +      data &EM_USER_OUTSEQ;
19581 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19582 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19583 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19584 +           _XMISC_=_VMISC_
19585 +        %end;
19586 +        %if "&em_tree_aprof" ne "."  %then %do;
19587 +           _XAPROF_=_VAPROF_
19588 +           _XPROF_ = _VPROF_
19589 +        %end;
19590 +        %if "&em_tree_aloss" ne "."  %then %do;
19591 +           _XALOSS_=_VALOSS_
19592 +        %end;
19593 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19594 +           _XPASE_ = _VPASE_
19595 +           _XPMISC_ = _VPMISC_
19596 +        %end;
19598 +        ));
19599 +     %end;
19600 +     %else %do;
19601 +        set &EM_USER_OUTSEQ;
19602 +     %end;
19604 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19605 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19606 +            _MISC_   15.&EM_PROPERTY_PRECISION
19607 +         %end;
19608 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19609 +            _PASE_  15.&EM_PROPERTY_PRECISION
19610 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19611 +         %end;
19612 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19613 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19614 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19615 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19616 +            %end;
19617 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19618 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19619 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19620 +            %end;
19621 +         %end;
19622 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19623 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19624 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19625 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19626 +            %end;
19627 +         %end;
19628 +         %if "&em_tree_seq" ne "." %then %do;
19629 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19630 +         %end;
19631 +         %if "&em_tree_vseq" ne "." %then %do;
19632 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19633 +         %end;
19634 +         %if "&em_tree_aprof" ne "." %then %do;
19635 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19636 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19637 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19638 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19639 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19640 +           %end;
19641 +         %end;
19642 +         %else %if "&em_tree_aloss" ne "." %then %do;
19643 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19644 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19645 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19646 +           %end;
19647 +         %end;
19648 +      ;
19649 +    run;
19650 +   %end;
19652 +   /* Observation Based Importance */
19653 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19655 +      /* need to check for 0 obs */
19656 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19657 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19658 +      %let rc=%sysfunc(close(&dsid));
19660 +      %if &onobs %then %do;
19661 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19662 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19664 +         data &EM_USER_OUTOBSIMP;
19665 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19666 +           if _a;
19667 +           by _INPUT1_;
19668 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19669 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19670 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19671 +                   %end;
19672 +                   ;
19673 +         run;
19674 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19675 +      %end;
19676 +   %end;
19678 +  %end;
19680 +  /* create dataset to support tree diagram and icicle plot */
19681 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19682 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19684 +  /* display tree diagram */
19685 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19686 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19688 +  /* display icicle diagram */
19689 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19690 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19692 +  /* Leaf Statistics Plot */
19693 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19695 +  /* print leaf information to output window */
19696 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19698 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19699 +       by descending N;
19700 +     run;
19702 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19703 +     %local vn;
19704 +     data _null_;
19705 +       set t (obs=2) end=eof;
19706 +       if eof then do;
19707 +         call symput("vn", strip(put(vn, best.)));
19708 +       end;
19709 +     run;
19711 +     data t;
19712 +       set t;
19713 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19714 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19715 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19716 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19717 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19718 +       %end;
19719 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19720 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19721 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19722 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19723 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19724 +          %end;
19725 +       %end;
19726 +       ;
19727 +     run;
19729 +     /* determine if rase is found in t */
19730 +    %let dsid=%sysfunc(open(t,i));
19731 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19732 +    %let rc=%sysfunc(close(&dsid));
19734 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19735 +     proc print data=t noobs label;
19736 +       where tprob ne .;
19737 +       var node depth N tprob
19738 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19739 +         %if "&vn" ne "." %then %do;
19740 +           VN
19741 +         %end;
19742 +         vprob
19743 +       %end;
19744 +       %if &raseexists %then %do;
19745 +            RASE
19746 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19747 +              VRASE
19748 +            %end;
19749 +       %end;
19750 +       ;
19751 +     run;
19752 +     title10;
19753 +  %end;
19755 +  /* create plots that are done during training of node */
19756 +  /* display iterative plot, including reference line */
19757 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19758 +   /* %if &nleaves eq  %then %do; */
19759 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19760 +      data _null_;
19761 +        set &EM_USER_OUTTOPOLOGY end=eof;
19762 +        if eof then do;
19763 +          call symput('nleaves', LEAF);
19764 +        end;
19765 +      run;
19766 +   /* %end; */
19768 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19769 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19770 +  %end;
19772 +  /* display leaf statistics */
19773 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19775 +  /* stats by node if multiple targets = Y */
19776 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19777 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19778 +    data &EM_USER_OUTSTATS;
19779 +      set &EM_USER_OUTSTATS;
19781 +     * if STATNAME="TARGET" then delete;
19782 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19783 +      drop leaf;
19784 +    run;
19785 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19787 +  %end;
19788 +  %else %do;
19789 +    /* add outstats and outdescribe to spk but not results */
19790 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19791 +  %end;
19793 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 16 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _VASE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 59 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 59 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_Y_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_Y_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='YES');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 21 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 21 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 12 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 21 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 85 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 85 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 85 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 85 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 85 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 42 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1521 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 42 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 43 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable VN is uninitialized.
NOTE: There were 42 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 43 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 43 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 43 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 21 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 43 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 172 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 172 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 172 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 129 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 43 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 172 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 172 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 172 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 43 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 172 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 172 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 172 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 172 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 43 observations and 2 variables.
NOTE: The data set WORK.TEMPPREDICT has 43 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 86 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 3 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 86 observations read from the data set WORK.TEMPPROB.
NOTE: There were 43 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 43 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 43 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 43 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1095:196
NOTE: There were 43 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 43 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 43 observations read from the data set WORK.TEMPN.
NOTE: There were 43 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 43 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 43 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 172 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 43 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 43 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 43 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 43 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 43 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 22 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 22 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable vprob is uninitialized.
NOTE: Variable perc_valid is uninitialized.
NOTE: Variable percevent_valid is uninitialized.
NOTE: There were 43 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 22 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 43 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 43 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 43 observations and 30 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 43 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      289:141
NOTE: There were 43 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
19794
19795  *------------------------------------------------------------*;
19796  * End REPORT: Tree;
19797  *------------------------------------------------------------*;
 
19798  /* Reset EM Options */
19799  options formchar="|----|+|---+=|-/\<>*";
19800  options nocenter ls=256 ps=10000;
19801  goptions reset=all device=GIF NODISPLAY;
 
19802  proc sort data=WORK.EM_USER_REPORT;
19803  by ID VIEW;
19804  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19805  proc sort data=EMWS1.Ids_CMeta_DATA out=WORK.SUBSETINMETA;
19806  by NAME;
19807  run;
 
NOTE: There were 17 observations read from the data set EMWS1.IDS_CMETA_DATA.
NOTE: The data set WORK.SUBSETINMETA has 17 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19808  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19809  by NAME;
19810  run;
 
NOTE: There were 17 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19811  data WORK.ASSESS_META;
19812  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19813  by NAME;
19814  run;
 
NOTE: There were 17 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 17 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 17 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19815  data EM_temp_assessMeta;
19816  set EMWS1.Tree_CMeta_TRAIN;
19817  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19818  run;
 
NOTE: There were 10 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19819  data EM_temp_assessdata;
19820  set EMWS1.Tree_TRAIN(keep=
19821  F_y
19822  I_y
19823  P_yno
19824  P_yyes
19825  Q_yno
19826  Q_yyes
19827  R_yno
19828  R_yyes
19829  U_y
19830  _WARN_
19831  y
19832  );
19833  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 45211 observations read from the data set DATA.FFTSALES.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.10 seconds
 
NOTE: There were 45211 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 45211 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 45211 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24115   %let _cn = %sysfunc(getoption(CENTER));
24116   options nocenter;
24117   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
24118   var STAT LABEL TRAIN
24119   ;
24120   by TARGET TARGETLABEL;
24121   title9 ' ';
24122   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
24123   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24124   title10;
24125   options &_cn;
 
24126   proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
24127   by DATAROLE TARGET TARGETLABEL;
24128   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 4 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
24129   %let _cn = %sysfunc(getoption(CENTER));
24130   options nocenter;
24131   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
24132   var from into pct_row pct_col count percent
24133   ;
24134   by DATAROLE TARGET TARGETLABEL;
24135   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
24136   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
24137   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
24138   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
24139   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
24140   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
24141   where _TYPE_='PREDICTION';
24142   title9 ' ';
24143   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
24144   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24145   title9;
24146   title10;
24147   options &_cn;
 
24148   %let _cn = %sysfunc(getoption(CENTER));
24149   options nocenter;
24150   data EMWS1.Tree_EMEVENTREPORT;
24151   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
24152   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
24152 ! FALSEEVENT
24153   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
24154      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
24155   FALSEEVENT=0;
24156   FALSENEVENT=0;
24157   TRUEEVENT=0;
24158   TRUENEVENT=0;
24159   set EMWS1.Tree_EMEVENTREPORT;
24160   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
24161   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
24162   title9 ' ';
24163   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
24164   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
24165   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24166   title10;
24167   options &_cn;
 
24168   proc datasets library=EMWS1 nolist;
24169   modify Tree_EMRANK;
24170   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
24171   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
24172   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
24173   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.29 seconds
      cpu time            0.23 seconds
 
 
24174   %let _cn = %sysfunc(getoption(CENTER));
24175   options nocenter;
24176   proc print data=EMWS1.Tree_EMRANK label noobs;
24177   var
24178   decile gain lift liftc resp respc N _meanP_;
24179   by
24180   notsorted DATAROLE
24181   notsorted TARGET
24182   notsorted TARGETLABEL
24183   ;
24184   title9 ' ';
24185   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
24186   run;
 
NOTE: There were 20 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24187   title10;
24188   options &_cn;
 
24189   proc datasets library=EMWS1 nolist;
24190   modify Tree_EMSCOREDIST;
24191   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
24192   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
24193   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
24194   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.29 seconds
      cpu time            0.29 seconds
 
 
